{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web Development Documentation \u00b6 Overview \u00b6 This documentation covers the implementation details of web development experiments 1-4, focusing on HTML, CSS, JavaScript, Django and React development. Lab 1: Web Basics \u00b6 Work 1 \u00b6 Basic HTML structure CSS styling Layout design Work 2 \u00b6 JavaScript fundamentals DOM manipulation Event handling Work 3 \u00b6 Form validation User interaction Dynamic content Work 4 \u00b6 AJAX implementation Data fetching Asynchronous operations Work 5 \u00b6 Responsive design Mobile optimization Cross-browser compatibility Lab 2: Car Ownership Management System \u00b6 Features \u00b6 Model design and database relationships CRUD operations implementation Admin interface configuration URL routing and views Form handling and validation Technologies \u00b6 Django Framework SQLite Database Django Admin Django Forms Django Templates Lab 3: Flight Booking System Backend \u00b6 Features \u00b6 RESTful API development Database modeling Authentication system Booking management Comment system Technologies \u00b6 Django REST Framework API Authentication JSON Data Processing Database Relationships Error Handling Lab 4: Flight Booking System Frontend \u00b6 Features \u00b6 React component development Page routing implementation State management API integration User interface design Technologies \u00b6 React React Router Element Plus UI Axios CSS Modules Technology Stack \u00b6 Backend \u00b6 Python 3.8+ Django 4.0+ Django REST Framework SQLite3 Frontend \u00b6 Node.js React 18 React Router 6 Element Plus Axios Additional Technologies \u00b6 Backend: Django REST Framework Frontend: Vue.js + Element Plus Database: SQLite Documentation: MkDocs Quick Navigation \u00b6 Lab 1 Work 1 Lab 1 Work 2 Lab 1 Work 3 Lab 1 Work 4 Lab 1 Work 5 Lab 2 Overview Lab 3 Models Lab 4 Pages Project Structure \u00b6 ``` web1/ \u251c\u2500\u2500 air_system/ # Django backend project \u2502 \u251c\u2500\u2500 app/ # Main application \u2502 \u2514\u2500\u2500 air_system/ # Project configuration \u251c\u2500\u2500 flight-project/ # Vue.js frontend project \u2502 \u251c\u2500\u2500 src/ # Source code \u2502 \u2514\u2500\u2500 public/ # Static resources \u2514\u2500\u2500 docs/ # Project documentation \u2514\u2500\u2500 docs/ # MkDocs documentation","title":"Home"},{"location":"#web-development-documentation","text":"","title":"Web Development Documentation"},{"location":"#overview","text":"This documentation covers the implementation details of web development experiments 1-4, focusing on HTML, CSS, JavaScript, Django and React development.","title":"Overview"},{"location":"#lab-1-web-basics","text":"","title":"Lab 1: Web Basics"},{"location":"#work-1","text":"Basic HTML structure CSS styling Layout design","title":"Work 1"},{"location":"#work-2","text":"JavaScript fundamentals DOM manipulation Event handling","title":"Work 2"},{"location":"#work-3","text":"Form validation User interaction Dynamic content","title":"Work 3"},{"location":"#work-4","text":"AJAX implementation Data fetching Asynchronous operations","title":"Work 4"},{"location":"#work-5","text":"Responsive design Mobile optimization Cross-browser compatibility","title":"Work 5"},{"location":"#lab-2-car-ownership-management-system","text":"","title":"Lab 2: Car Ownership Management System"},{"location":"#features","text":"Model design and database relationships CRUD operations implementation Admin interface configuration URL routing and views Form handling and validation","title":"Features"},{"location":"#technologies","text":"Django Framework SQLite Database Django Admin Django Forms Django Templates","title":"Technologies"},{"location":"#lab-3-flight-booking-system-backend","text":"","title":"Lab 3: Flight Booking System Backend"},{"location":"#features_1","text":"RESTful API development Database modeling Authentication system Booking management Comment system","title":"Features"},{"location":"#technologies_1","text":"Django REST Framework API Authentication JSON Data Processing Database Relationships Error Handling","title":"Technologies"},{"location":"#lab-4-flight-booking-system-frontend","text":"","title":"Lab 4: Flight Booking System Frontend"},{"location":"#features_2","text":"React component development Page routing implementation State management API integration User interface design","title":"Features"},{"location":"#technologies_2","text":"React React Router Element Plus UI Axios CSS Modules","title":"Technologies"},{"location":"#technology-stack","text":"","title":"Technology Stack"},{"location":"#backend","text":"Python 3.8+ Django 4.0+ Django REST Framework SQLite3","title":"Backend"},{"location":"#frontend","text":"Node.js React 18 React Router 6 Element Plus Axios","title":"Frontend"},{"location":"#additional-technologies","text":"Backend: Django REST Framework Frontend: Vue.js + Element Plus Database: SQLite Documentation: MkDocs","title":"Additional Technologies"},{"location":"#quick-navigation","text":"Lab 1 Work 1 Lab 1 Work 2 Lab 1 Work 3 Lab 1 Work 4 Lab 1 Work 5 Lab 2 Overview Lab 3 Models Lab 4 Pages","title":"Quick Navigation"},{"location":"#project-structure","text":"``` web1/ \u251c\u2500\u2500 air_system/ # Django backend project \u2502 \u251c\u2500\u2500 app/ # Main application \u2502 \u2514\u2500\u2500 air_system/ # Project configuration \u251c\u2500\u2500 flight-project/ # Vue.js frontend project \u2502 \u251c\u2500\u2500 src/ # Source code \u2502 \u2514\u2500\u2500 public/ # Static resources \u2514\u2500\u2500 docs/ # Project documentation \u2514\u2500\u2500 docs/ # MkDocs documentation","title":"Project Structure"},{"location":"lab1/work1/","text":"Work 1: HTML and CSS Basics \u00b6 Overview \u00b6 Introduction to web development fundamentals using HTML and CSS. Key Features \u00b6 Basic HTML document structure CSS styling and formatting Layout design principles Technologies \u00b6 HTML5 CSS3 Web Standards Code Examples \u00b6 HTML Structure \u00b6 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My First Web Page</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <header> <h1>Welcome to My Website</h1> <nav> <ul> <li><a href=\"#home\">Home</a></li> <li><a href=\"#about\">About</a></li> <li><a href=\"#contact\">Contact</a></li> </ul> </nav> </header> <main> <section id=\"home\"> <h2>Home Section</h2> <p>This is the main content of my website.</p> </section> </main> <footer> <p>&copy; 2024 My Website</p> </footer> </body> </html> CSS Styling \u00b6 ```css / Basic Reset / * { margin: 0; padding: 0; box-sizing: border-box; } / Header Styles / header { background-color: #333; color: white; padding: 1rem; } nav ul { list-style: none; display: flex; gap: 1rem; } nav a { color: white; text-decoration: none; } / Main Content / main { max-width: 1200px; margin: 0 auto; padding: 2rem; } / Footer / footer { background-color: #333; color: white; text-align: center; padding: 1rem; position: fixed; bottom: 0; width: 100%; }","title":"Work 1"},{"location":"lab1/work1/#work-1-html-and-css-basics","text":"","title":"Work 1: HTML and CSS Basics"},{"location":"lab1/work1/#overview","text":"Introduction to web development fundamentals using HTML and CSS.","title":"Overview"},{"location":"lab1/work1/#key-features","text":"Basic HTML document structure CSS styling and formatting Layout design principles","title":"Key Features"},{"location":"lab1/work1/#technologies","text":"HTML5 CSS3 Web Standards","title":"Technologies"},{"location":"lab1/work1/#code-examples","text":"","title":"Code Examples"},{"location":"lab1/work1/#html-structure","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My First Web Page</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <header> <h1>Welcome to My Website</h1> <nav> <ul> <li><a href=\"#home\">Home</a></li> <li><a href=\"#about\">About</a></li> <li><a href=\"#contact\">Contact</a></li> </ul> </nav> </header> <main> <section id=\"home\"> <h2>Home Section</h2> <p>This is the main content of my website.</p> </section> </main> <footer> <p>&copy; 2024 My Website</p> </footer> </body> </html>","title":"HTML Structure"},{"location":"lab1/work1/#css-styling","text":"```css / Basic Reset / * { margin: 0; padding: 0; box-sizing: border-box; } / Header Styles / header { background-color: #333; color: white; padding: 1rem; } nav ul { list-style: none; display: flex; gap: 1rem; } nav a { color: white; text-decoration: none; } / Main Content / main { max-width: 1200px; margin: 0 auto; padding: 2rem; } / Footer / footer { background-color: #333; color: white; text-align: center; padding: 1rem; position: fixed; bottom: 0; width: 100%; }","title":"CSS Styling"},{"location":"lab1/work2/","text":"Work 2: JavaScript Fundamentals \u00b6 Overview \u00b6 Learning JavaScript basics and DOM manipulation. Key Features \u00b6 JavaScript core concepts DOM manipulation techniques Event handling Interactive web elements Technologies \u00b6 JavaScript DOM API Event Listeners Code Examples \u00b6 DOM Manipulation \u00b6 // Selecting elements const header = document.querySelector('header'); const navLinks = document.querySelectorAll('nav a'); const mainContent = document.getElementById('main'); // Creating and adding elements const newSection = document.createElement('section'); newSection.className = 'new-section'; newSection.innerHTML = ` <h2>Dynamic Content</h2> <p>This section was created using JavaScript.</p> `; mainContent.appendChild(newSection); // Event handling navLinks.forEach(link => { link.addEventListener('click', (event) => { event.preventDefault(); const targetId = link.getAttribute('href').slice(1); const targetSection = document.getElementById(targetId); targetSection.scrollIntoView({ behavior: 'smooth' }); }); }); Interactive Features \u00b6 ```javascript // Counter example let count = 0; const counterDisplay = document.getElementById('counter'); const incrementBtn = document.getElementById('increment'); const decrementBtn = document.getElementById('decrement'); function updateCounter() { counterDisplay.textContent = count; // Add animation class counterDisplay.classList.add('updated'); // Remove animation class after animation completes setTimeout(() => { counterDisplay.classList.remove('updated'); }, 500); } incrementBtn.addEventListener('click', () => { count++; updateCounter(); }); decrementBtn.addEventListener('click', () => { count--; updateCounter(); }); // Toggle dark/light mode const themeToggle = document.getElementById('theme-toggle'); themeToggle.addEventListener('click', () => { document.body.classList.toggle('dark-mode'); const isDarkMode = document.body.classList.contains('dark-mode'); localStorage.setItem('darkMode', isDarkMode); });","title":"Work 2"},{"location":"lab1/work2/#work-2-javascript-fundamentals","text":"","title":"Work 2: JavaScript Fundamentals"},{"location":"lab1/work2/#overview","text":"Learning JavaScript basics and DOM manipulation.","title":"Overview"},{"location":"lab1/work2/#key-features","text":"JavaScript core concepts DOM manipulation techniques Event handling Interactive web elements","title":"Key Features"},{"location":"lab1/work2/#technologies","text":"JavaScript DOM API Event Listeners","title":"Technologies"},{"location":"lab1/work2/#code-examples","text":"","title":"Code Examples"},{"location":"lab1/work2/#dom-manipulation","text":"// Selecting elements const header = document.querySelector('header'); const navLinks = document.querySelectorAll('nav a'); const mainContent = document.getElementById('main'); // Creating and adding elements const newSection = document.createElement('section'); newSection.className = 'new-section'; newSection.innerHTML = ` <h2>Dynamic Content</h2> <p>This section was created using JavaScript.</p> `; mainContent.appendChild(newSection); // Event handling navLinks.forEach(link => { link.addEventListener('click', (event) => { event.preventDefault(); const targetId = link.getAttribute('href').slice(1); const targetSection = document.getElementById(targetId); targetSection.scrollIntoView({ behavior: 'smooth' }); }); });","title":"DOM Manipulation"},{"location":"lab1/work2/#interactive-features","text":"```javascript // Counter example let count = 0; const counterDisplay = document.getElementById('counter'); const incrementBtn = document.getElementById('increment'); const decrementBtn = document.getElementById('decrement'); function updateCounter() { counterDisplay.textContent = count; // Add animation class counterDisplay.classList.add('updated'); // Remove animation class after animation completes setTimeout(() => { counterDisplay.classList.remove('updated'); }, 500); } incrementBtn.addEventListener('click', () => { count++; updateCounter(); }); decrementBtn.addEventListener('click', () => { count--; updateCounter(); }); // Toggle dark/light mode const themeToggle = document.getElementById('theme-toggle'); themeToggle.addEventListener('click', () => { document.body.classList.toggle('dark-mode'); const isDarkMode = document.body.classList.contains('dark-mode'); localStorage.setItem('darkMode', isDarkMode); });","title":"Interactive Features"},{"location":"lab1/work3/","text":"Work 3: Form Validation \u00b6 Overview \u00b6 Implementing form validation and user interaction. Key Features \u00b6 Form input validation User feedback mechanisms Dynamic content updates Error handling Technologies \u00b6 JavaScript Forms API Regular Expressions Input Validation DOM Events Code Examples \u00b6 Form HTML Structure \u00b6 <form id=\"registrationForm\" class=\"registration-form\"> <div class=\"form-group\"> <label for=\"username\">Username:</label> <input type=\"text\" id=\"username\" name=\"username\" required> <span class=\"error-message\"></span> </div> <div class=\"form-group\"> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\" required> <span class=\"error-message\"></span> </div> <div class=\"form-group\"> <label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" required> <span class=\"error-message\"></span> </div> <div class=\"form-group\"> <label for=\"confirmPassword\">Confirm Password:</label> <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required> <span class=\"error-message\"></span> </div> <button type=\"submit\">Register</button> </form> Form Validation JavaScript \u00b6 ```javascript document.getElementById('registrationForm').addEventListener('submit', function(e) { e.preventDefault(); // Reset error messages clearErrors(); // Get form values const username = document.getElementById('username').value; const email = document.getElementById('email').value; const password = document.getElementById('password').value; const confirmPassword = document.getElementById('confirmPassword').value; // Validation flags let isValid = true; // Username validation if (username.length < 3) { showError('username', 'Username must be at least 3 characters long'); isValid = false; } // Email validation const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!emailRegex.test(email)) { showError('email', 'Please enter a valid email address'); isValid = false; } // Password validation if (password.length < 8) { showError('password', 'Password must be at least 8 characters long'); isValid = false; } // Confirm password if (password !== confirmPassword) { showError('confirmPassword', 'Passwords do not match'); isValid = false; } // If valid, submit the form if (isValid) { // Show success message showSuccess(); // Here you would typically send the data to a server } }); function showError(fieldId, message) { const field = document.getElementById(fieldId); const errorSpan = field.nextElementSibling; errorSpan.textContent = message; field.classList.add('error'); } function clearErrors() { const errorMessages = document.querySelectorAll('.error-message'); const inputs = document.querySelectorAll('input'); errorMessages.forEach(span => span.textContent = ''); inputs.forEach(input => input.classList.remove('error')); } function showSuccess() { const form = document.getElementById('registrationForm'); form.innerHTML = ' Registration successful! '; }","title":"Work 3"},{"location":"lab1/work3/#work-3-form-validation","text":"","title":"Work 3: Form Validation"},{"location":"lab1/work3/#overview","text":"Implementing form validation and user interaction.","title":"Overview"},{"location":"lab1/work3/#key-features","text":"Form input validation User feedback mechanisms Dynamic content updates Error handling","title":"Key Features"},{"location":"lab1/work3/#technologies","text":"JavaScript Forms API Regular Expressions Input Validation DOM Events","title":"Technologies"},{"location":"lab1/work3/#code-examples","text":"","title":"Code Examples"},{"location":"lab1/work3/#form-html-structure","text":"<form id=\"registrationForm\" class=\"registration-form\"> <div class=\"form-group\"> <label for=\"username\">Username:</label> <input type=\"text\" id=\"username\" name=\"username\" required> <span class=\"error-message\"></span> </div> <div class=\"form-group\"> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\" required> <span class=\"error-message\"></span> </div> <div class=\"form-group\"> <label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" required> <span class=\"error-message\"></span> </div> <div class=\"form-group\"> <label for=\"confirmPassword\">Confirm Password:</label> <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required> <span class=\"error-message\"></span> </div> <button type=\"submit\">Register</button> </form>","title":"Form HTML Structure"},{"location":"lab1/work3/#form-validation-javascript","text":"```javascript document.getElementById('registrationForm').addEventListener('submit', function(e) { e.preventDefault(); // Reset error messages clearErrors(); // Get form values const username = document.getElementById('username').value; const email = document.getElementById('email').value; const password = document.getElementById('password').value; const confirmPassword = document.getElementById('confirmPassword').value; // Validation flags let isValid = true; // Username validation if (username.length < 3) { showError('username', 'Username must be at least 3 characters long'); isValid = false; } // Email validation const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!emailRegex.test(email)) { showError('email', 'Please enter a valid email address'); isValid = false; } // Password validation if (password.length < 8) { showError('password', 'Password must be at least 8 characters long'); isValid = false; } // Confirm password if (password !== confirmPassword) { showError('confirmPassword', 'Passwords do not match'); isValid = false; } // If valid, submit the form if (isValid) { // Show success message showSuccess(); // Here you would typically send the data to a server } }); function showError(fieldId, message) { const field = document.getElementById(fieldId); const errorSpan = field.nextElementSibling; errorSpan.textContent = message; field.classList.add('error'); } function clearErrors() { const errorMessages = document.querySelectorAll('.error-message'); const inputs = document.querySelectorAll('input'); errorMessages.forEach(span => span.textContent = ''); inputs.forEach(input => input.classList.remove('error')); } function showSuccess() { const form = document.getElementById('registrationForm'); form.innerHTML = ' Registration successful! '; }","title":"Form Validation JavaScript"},{"location":"lab1/work4/","text":"Work 4: AJAX and Data Fetching \u00b6 Overview \u00b6 Learning asynchronous programming and data fetching. Key Features \u00b6 AJAX implementation API integration Data handling Asynchronous operations Technologies \u00b6 AJAX Fetch API JSON Promises Code Examples \u00b6 Fetch API Example \u00b6 // Function to fetch user data async function fetchUsers() { try { const response = await fetch('https://api.example.com/users'); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const data = await response.json(); displayUsers(data); } catch (error) { console.error('Error fetching users:', error); showError('Failed to load users. Please try again later.'); } } // Function to display users function displayUsers(users) { const userList = document.getElementById('userList'); userList.innerHTML = ''; users.forEach(user => { const userElement = document.createElement('div'); userElement.className = 'user-card'; userElement.innerHTML = ` <h3>${user.name}</h3> <p>Email: ${user.email}</p> <button onclick=\"loadUserDetails(${user.id})\">View Details</button> `; userList.appendChild(userElement); }); } POST Request Example \u00b6 ```javascript // Function to create a new user async function createUser(userData) { const loadingSpinner = document.getElementById('loading'); loadingSpinner.style.display = 'block'; try { const response = await fetch('https://api.example.com/users', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + getToken() }, body: JSON.stringify(userData) }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); showSuccess('User created successfully!'); return result; } catch (error) { console.error('Error creating user:', error); showError('Failed to create user. Please try again.'); throw error; } finally { loadingSpinner.style.display = 'none'; } } // Example usage with error handling document.getElementById('createUserForm').addEventListener('submit', async (e) => { e.preventDefault(); const userData = { name: document.getElementById('name').value, email: document.getElementById('email').value, role: document.getElementById('role').value }; try { const newUser = await createUser(userData); console.log('New user created:', newUser); // Update UI or redirect } catch (error) { // Error already handled in createUser function } });","title":"Work 4"},{"location":"lab1/work4/#work-4-ajax-and-data-fetching","text":"","title":"Work 4: AJAX and Data Fetching"},{"location":"lab1/work4/#overview","text":"Learning asynchronous programming and data fetching.","title":"Overview"},{"location":"lab1/work4/#key-features","text":"AJAX implementation API integration Data handling Asynchronous operations","title":"Key Features"},{"location":"lab1/work4/#technologies","text":"AJAX Fetch API JSON Promises","title":"Technologies"},{"location":"lab1/work4/#code-examples","text":"","title":"Code Examples"},{"location":"lab1/work4/#fetch-api-example","text":"// Function to fetch user data async function fetchUsers() { try { const response = await fetch('https://api.example.com/users'); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const data = await response.json(); displayUsers(data); } catch (error) { console.error('Error fetching users:', error); showError('Failed to load users. Please try again later.'); } } // Function to display users function displayUsers(users) { const userList = document.getElementById('userList'); userList.innerHTML = ''; users.forEach(user => { const userElement = document.createElement('div'); userElement.className = 'user-card'; userElement.innerHTML = ` <h3>${user.name}</h3> <p>Email: ${user.email}</p> <button onclick=\"loadUserDetails(${user.id})\">View Details</button> `; userList.appendChild(userElement); }); }","title":"Fetch API Example"},{"location":"lab1/work4/#post-request-example","text":"```javascript // Function to create a new user async function createUser(userData) { const loadingSpinner = document.getElementById('loading'); loadingSpinner.style.display = 'block'; try { const response = await fetch('https://api.example.com/users', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + getToken() }, body: JSON.stringify(userData) }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } const result = await response.json(); showSuccess('User created successfully!'); return result; } catch (error) { console.error('Error creating user:', error); showError('Failed to create user. Please try again.'); throw error; } finally { loadingSpinner.style.display = 'none'; } } // Example usage with error handling document.getElementById('createUserForm').addEventListener('submit', async (e) => { e.preventDefault(); const userData = { name: document.getElementById('name').value, email: document.getElementById('email').value, role: document.getElementById('role').value }; try { const newUser = await createUser(userData); console.log('New user created:', newUser); // Update UI or redirect } catch (error) { // Error already handled in createUser function } });","title":"POST Request Example"},{"location":"lab1/work5/","text":"Work 5: Responsive Design \u00b6 Overview \u00b6 Creating responsive and mobile-friendly web layouts. Key Features \u00b6 Responsive design principles Mobile-first approach Cross-browser compatibility Media queries Technologies \u00b6 CSS Grid Flexbox Media Queries Mobile Optimization Code Examples \u00b6 Responsive Grid Layout \u00b6 /* Mobile First Grid Layout */ .container { display: grid; grid-template-columns: 1fr; gap: 1rem; padding: 1rem; } /* Tablet Layout */ @media screen and (min-width: 768px) { .container { grid-template-columns: repeat(2, 1fr); } } /* Desktop Layout */ @media screen and (min-width: 1024px) { .container { grid-template-columns: repeat(3, 1fr); max-width: 1200px; margin: 0 auto; } } Flexbox Navigation \u00b6 /* Mobile Navigation */ .nav { display: flex; flex-direction: column; padding: 1rem; } .nav-list { display: none; /* Hidden by default on mobile */ flex-direction: column; gap: 1rem; } .nav-list.active { display: flex; } .nav-toggle { display: block; /* Show hamburger menu on mobile */ } /* Desktop Navigation */ @media screen and (min-width: 768px) { .nav { flex-direction: row; justify-content: space-between; align-items: center; } .nav-list { display: flex; flex-direction: row; gap: 2rem; } .nav-toggle { display: none; /* Hide hamburger menu on desktop */ } } Responsive Images \u00b6 ```css / Responsive Images / .responsive-image { max-width: 100%; height: auto; } .image-gallery { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; padding: 1rem; } / Image Card / .image-card { position: relative; overflow: hidden; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } .image-card img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; } .image-card:hover img { transform: scale(1.05); } / Responsive Typography / html { font-size: 16px; } @media screen and (min-width: 768px) { html { font-size: 18px; } } @media screen and (min-width: 1200px) { html { font-size: 20px; } }","title":"Work 5"},{"location":"lab1/work5/#work-5-responsive-design","text":"","title":"Work 5: Responsive Design"},{"location":"lab1/work5/#overview","text":"Creating responsive and mobile-friendly web layouts.","title":"Overview"},{"location":"lab1/work5/#key-features","text":"Responsive design principles Mobile-first approach Cross-browser compatibility Media queries","title":"Key Features"},{"location":"lab1/work5/#technologies","text":"CSS Grid Flexbox Media Queries Mobile Optimization","title":"Technologies"},{"location":"lab1/work5/#code-examples","text":"","title":"Code Examples"},{"location":"lab1/work5/#responsive-grid-layout","text":"/* Mobile First Grid Layout */ .container { display: grid; grid-template-columns: 1fr; gap: 1rem; padding: 1rem; } /* Tablet Layout */ @media screen and (min-width: 768px) { .container { grid-template-columns: repeat(2, 1fr); } } /* Desktop Layout */ @media screen and (min-width: 1024px) { .container { grid-template-columns: repeat(3, 1fr); max-width: 1200px; margin: 0 auto; } }","title":"Responsive Grid Layout"},{"location":"lab1/work5/#flexbox-navigation","text":"/* Mobile Navigation */ .nav { display: flex; flex-direction: column; padding: 1rem; } .nav-list { display: none; /* Hidden by default on mobile */ flex-direction: column; gap: 1rem; } .nav-list.active { display: flex; } .nav-toggle { display: block; /* Show hamburger menu on mobile */ } /* Desktop Navigation */ @media screen and (min-width: 768px) { .nav { flex-direction: row; justify-content: space-between; align-items: center; } .nav-list { display: flex; flex-direction: row; gap: 2rem; } .nav-toggle { display: none; /* Hide hamburger menu on desktop */ } }","title":"Flexbox Navigation"},{"location":"lab1/work5/#responsive-images","text":"```css / Responsive Images / .responsive-image { max-width: 100%; height: auto; } .image-gallery { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; padding: 1rem; } / Image Card / .image-card { position: relative; overflow: hidden; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } .image-card img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; } .image-card:hover img { transform: scale(1.05); } / Responsive Typography / html { font-size: 16px; } @media screen and (min-width: 768px) { html { font-size: 18px; } } @media screen and (min-width: 1200px) { html { font-size: 20px; } }","title":"Responsive Images"},{"location":"lab2/admin/","text":"Django Admin Interface Configuration \u00b6 Overview \u00b6 Experiment 2 configures the Django admin interface for the car ownership management system, allowing administrators to easily manage owners, cars, driving licenses, and ownership information. Admin Class Configuration \u00b6 Owner Admin \u00b6 from django.contrib import admin from .models import Owner, Car, DrivingLicense, Ownership @admin.register(Owner) class OwnerAdmin(admin.ModelAdmin): list_display = ('last_name', 'first_name', 'birth_date') search_fields = ('last_name', 'first_name') ordering = ('last_name', 'first_name') Car Admin \u00b6 @admin.register(Car) class CarAdmin(admin.ModelAdmin): list_display = ('license_plate', 'make', 'model', 'color') list_filter = ('make', 'model') search_fields = ('license_plate', 'make', 'model') DrivingLicense Admin \u00b6 @admin.register(DrivingLicense) class DrivingLicenseAdmin(admin.ModelAdmin): list_display = ('owner', 'license_number', 'type', 'issue_date') list_filter = ('type', 'issue_date') search_fields = ('owner__last_name', 'license_number') date_hierarchy = 'issue_date' Ownership Admin \u00b6 @admin.register(Ownership) class OwnershipAdmin(admin.ModelAdmin): list_display = ('owner', 'car', 'start_date', 'end_date') list_filter = ('start_date', 'end_date') search_fields = ('owner__last_name', 'car__license_plate') date_hierarchy = 'start_date' Feature Description \u00b6 Owner Management Display name and birth date Support name search Sort by last name and first name Car Management Display license plate, make, model, and color Filter by make and model Support license plate and car model search DrivingLicense Management Display owner, license number, type, and issue date Filter by type and issue date Support owner name and license number search Date hierarchy navigation Ownership Management Display owner, car, and ownership dates Filter by dates Support owner and license plate search Date hierarchy navigation Admin Interface Features \u00b6 List Display Custom display fields Sorting functionality Pagination Filtering Sidebar filters Date hierarchy navigation Search box Editing Add new records Modify existing records Delete records Batch operations Permission Control User group-based permissions Operation control Field-level permissions Usage Instructions \u00b6 Access Admin Interface http://your-domain/admin/ Login as Administrator Use superuser account Or use account with admin privileges Select Model to Manage Owner Management Car Management DrivingLicense Management Ownership Management Perform Operations View lists Add records Modify records Delete records Batch operations","title":"Admin"},{"location":"lab2/admin/#django-admin-interface-configuration","text":"","title":"Django Admin Interface Configuration"},{"location":"lab2/admin/#overview","text":"Experiment 2 configures the Django admin interface for the car ownership management system, allowing administrators to easily manage owners, cars, driving licenses, and ownership information.","title":"Overview"},{"location":"lab2/admin/#admin-class-configuration","text":"","title":"Admin Class Configuration"},{"location":"lab2/admin/#owner-admin","text":"from django.contrib import admin from .models import Owner, Car, DrivingLicense, Ownership @admin.register(Owner) class OwnerAdmin(admin.ModelAdmin): list_display = ('last_name', 'first_name', 'birth_date') search_fields = ('last_name', 'first_name') ordering = ('last_name', 'first_name')","title":"Owner Admin"},{"location":"lab2/admin/#car-admin","text":"@admin.register(Car) class CarAdmin(admin.ModelAdmin): list_display = ('license_plate', 'make', 'model', 'color') list_filter = ('make', 'model') search_fields = ('license_plate', 'make', 'model')","title":"Car Admin"},{"location":"lab2/admin/#drivinglicense-admin","text":"@admin.register(DrivingLicense) class DrivingLicenseAdmin(admin.ModelAdmin): list_display = ('owner', 'license_number', 'type', 'issue_date') list_filter = ('type', 'issue_date') search_fields = ('owner__last_name', 'license_number') date_hierarchy = 'issue_date'","title":"DrivingLicense Admin"},{"location":"lab2/admin/#ownership-admin","text":"@admin.register(Ownership) class OwnershipAdmin(admin.ModelAdmin): list_display = ('owner', 'car', 'start_date', 'end_date') list_filter = ('start_date', 'end_date') search_fields = ('owner__last_name', 'car__license_plate') date_hierarchy = 'start_date'","title":"Ownership Admin"},{"location":"lab2/admin/#feature-description","text":"Owner Management Display name and birth date Support name search Sort by last name and first name Car Management Display license plate, make, model, and color Filter by make and model Support license plate and car model search DrivingLicense Management Display owner, license number, type, and issue date Filter by type and issue date Support owner name and license number search Date hierarchy navigation Ownership Management Display owner, car, and ownership dates Filter by dates Support owner and license plate search Date hierarchy navigation","title":"Feature Description"},{"location":"lab2/admin/#admin-interface-features","text":"List Display Custom display fields Sorting functionality Pagination Filtering Sidebar filters Date hierarchy navigation Search box Editing Add new records Modify existing records Delete records Batch operations Permission Control User group-based permissions Operation control Field-level permissions","title":"Admin Interface Features"},{"location":"lab2/admin/#usage-instructions","text":"Access Admin Interface http://your-domain/admin/ Login as Administrator Use superuser account Or use account with admin privileges Select Model to Manage Owner Management Car Management DrivingLicense Management Ownership Management Perform Operations View lists Add records Modify records Delete records Batch operations","title":"Usage Instructions"},{"location":"lab2/forms/","text":"Django Forms Configuration \u00b6 Overview \u00b6 Experiment 2 implements form handling for the car ownership management system, providing user-friendly interfaces for data input and validation. Form Classes \u00b6 Owner Form \u00b6 from django import forms from .models import Owner class OwnerForm(forms.ModelForm): class Meta: model = Owner fields = ['last_name', 'first_name', 'birth_date'] widgets = { 'birth_date': forms.DateInput(attrs={'type': 'date'}) } Car Form \u00b6 from .models import Car class CarForm(forms.ModelForm): class Meta: model = Car fields = ['license_plate', 'make', 'model', 'color'] DrivingLicense Form \u00b6 from .models import DrivingLicense class DrivingLicenseForm(forms.ModelForm): class Meta: model = DrivingLicense fields = ['owner', 'license_number', 'document_number', 'type', 'issue_date'] widgets = { 'issue_date': forms.DateInput(attrs={'type': 'date'}) } Ownership Form \u00b6 from .models import Ownership class OwnershipForm(forms.ModelForm): class Meta: model = Ownership fields = ['owner', 'car', 'start_date', 'end_date'] widgets = { 'start_date': forms.DateInput(attrs={'type': 'date'}), 'end_date': forms.DateInput(attrs={'type': 'date'}) } Form Features \u00b6 Data Validation Field type validation Required field checking Custom validation rules Widget Customization Date input widgets Select widgets for relationships Custom field rendering Error Handling Field-specific error messages Form-wide error messages Validation error display Form Processing GET/POST handling Data cleaning and normalization Model instance creation/update Usage Examples \u00b6 View Implementation \u00b6 def owner_create(request): if request.method == 'POST': form = OwnerForm(request.POST) if form.is_valid(): owner = form.save() return redirect('owner_detail', owner_id=owner.id) else: form = OwnerForm() return render(request, 'owner_form.html', {'form': form}) Template Usage \u00b6 <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Submit</button> </form> Form Validation Rules \u00b6 Owner Form Last name and first name required Birth date must be in the past Car Form License plate must be unique Make and model required DrivingLicense Form License number must be unique Issue date required Valid license type selection Ownership Form Valid owner and car selection Start date required End date must be after start date if provided","title":"Forms"},{"location":"lab2/forms/#django-forms-configuration","text":"","title":"Django Forms Configuration"},{"location":"lab2/forms/#overview","text":"Experiment 2 implements form handling for the car ownership management system, providing user-friendly interfaces for data input and validation.","title":"Overview"},{"location":"lab2/forms/#form-classes","text":"","title":"Form Classes"},{"location":"lab2/forms/#owner-form","text":"from django import forms from .models import Owner class OwnerForm(forms.ModelForm): class Meta: model = Owner fields = ['last_name', 'first_name', 'birth_date'] widgets = { 'birth_date': forms.DateInput(attrs={'type': 'date'}) }","title":"Owner Form"},{"location":"lab2/forms/#car-form","text":"from .models import Car class CarForm(forms.ModelForm): class Meta: model = Car fields = ['license_plate', 'make', 'model', 'color']","title":"Car Form"},{"location":"lab2/forms/#drivinglicense-form","text":"from .models import DrivingLicense class DrivingLicenseForm(forms.ModelForm): class Meta: model = DrivingLicense fields = ['owner', 'license_number', 'document_number', 'type', 'issue_date'] widgets = { 'issue_date': forms.DateInput(attrs={'type': 'date'}) }","title":"DrivingLicense Form"},{"location":"lab2/forms/#ownership-form","text":"from .models import Ownership class OwnershipForm(forms.ModelForm): class Meta: model = Ownership fields = ['owner', 'car', 'start_date', 'end_date'] widgets = { 'start_date': forms.DateInput(attrs={'type': 'date'}), 'end_date': forms.DateInput(attrs={'type': 'date'}) }","title":"Ownership Form"},{"location":"lab2/forms/#form-features","text":"Data Validation Field type validation Required field checking Custom validation rules Widget Customization Date input widgets Select widgets for relationships Custom field rendering Error Handling Field-specific error messages Form-wide error messages Validation error display Form Processing GET/POST handling Data cleaning and normalization Model instance creation/update","title":"Form Features"},{"location":"lab2/forms/#usage-examples","text":"","title":"Usage Examples"},{"location":"lab2/forms/#view-implementation","text":"def owner_create(request): if request.method == 'POST': form = OwnerForm(request.POST) if form.is_valid(): owner = form.save() return redirect('owner_detail', owner_id=owner.id) else: form = OwnerForm() return render(request, 'owner_form.html', {'form': form})","title":"View Implementation"},{"location":"lab2/forms/#template-usage","text":"<form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Submit</button> </form>","title":"Template Usage"},{"location":"lab2/forms/#form-validation-rules","text":"Owner Form Last name and first name required Birth date must be in the past Car Form License plate must be unique Make and model required DrivingLicense Form License number must be unique Issue date required Valid license type selection Ownership Form Valid owner and car selection Start date required End date must be after start date if provided","title":"Form Validation Rules"},{"location":"lab2/models/","text":"Django Models Configuration \u00b6 Overview \u00b6 Experiment 2 implements a car ownership management system using Django models. The system manages relationships between owners, cars, driving licenses, and ownership records. Model Classes \u00b6 Owner Model \u00b6 from django.db import models class Owner(models.Model): last_name = models.CharField(max_length=50) first_name = models.CharField(max_length=50) birth_date = models.DateField() def __str__(self): return f\"{self.last_name} {self.first_name}\" Car Model \u00b6 class Car(models.Model): license_plate = models.CharField(max_length=10, unique=True) make = models.CharField(max_length=50) model = models.CharField(max_length=50) color = models.CharField(max_length=20) def __str__(self): return f\"{self.make} {self.model} ({self.license_plate})\" DrivingLicense Model \u00b6 class DrivingLicense(models.Model): owner = models.OneToOneField(Owner, on_delete=models.CASCADE) license_number = models.CharField(max_length=20, unique=True) document_number = models.CharField(max_length=20) type = models.CharField(max_length=10) issue_date = models.DateField() def __str__(self): return f\"License {self.license_number} ({self.owner})\" Ownership Model \u00b6 class Ownership(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) def __str__(self): return f\"{self.owner} owns {self.car}\" Model Relationships \u00b6 Owner - DrivingLicense One-to-One relationship Each owner can have one driving license Cascade deletion when owner is deleted Owner - Car (through Ownership) Many-to-Many relationship Owners can own multiple cars Cars can have multiple owners (over time) Ownership model tracks the relationship period Field Types \u00b6 Character Fields CharField : For text data with maximum length Used for names, license plates, etc. Date Fields DateField : For storing dates Used for birth dates, issue dates, etc. Relationship Fields OneToOneField : For one-to-one relationships ForeignKey : For many-to-one relationships Model Features \u00b6 String Representation Custom __str__ methods Human-readable object representation Field Constraints Unique constraints Maximum length limits Required/optional fields Cascade Deletion Automatic deletion of related records Data integrity maintenance Data Validation Field type validation Unique constraint checking Required field validation Database Schema \u00b6 CREATE TABLE Owner ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(50) NOT NULL, first_name VARCHAR(50) NOT NULL, birth_date DATE NOT NULL ); CREATE TABLE Car ( id INTEGER PRIMARY KEY AUTOINCREMENT, license_plate VARCHAR(10) UNIQUE NOT NULL, make VARCHAR(50) NOT NULL, model VARCHAR(50) NOT NULL, color VARCHAR(20) NOT NULL ); CREATE TABLE DrivingLicense ( id INTEGER PRIMARY KEY AUTOINCREMENT, owner_id INTEGER UNIQUE NOT NULL, license_number VARCHAR(20) UNIQUE NOT NULL, document_number VARCHAR(20) NOT NULL, type VARCHAR(10) NOT NULL, issue_date DATE NOT NULL, FOREIGN KEY (owner_id) REFERENCES Owner(id) ON DELETE CASCADE ); CREATE TABLE Ownership ( id INTEGER PRIMARY KEY AUTOINCREMENT, owner_id INTEGER NOT NULL, car_id INTEGER NOT NULL, start_date DATE NOT NULL, end_date DATE, FOREIGN KEY (owner_id) REFERENCES Owner(id) ON DELETE CASCADE, FOREIGN KEY (car_id) REFERENCES Car(id) ON DELETE CASCADE );","title":"Models"},{"location":"lab2/models/#django-models-configuration","text":"","title":"Django Models Configuration"},{"location":"lab2/models/#overview","text":"Experiment 2 implements a car ownership management system using Django models. The system manages relationships between owners, cars, driving licenses, and ownership records.","title":"Overview"},{"location":"lab2/models/#model-classes","text":"","title":"Model Classes"},{"location":"lab2/models/#owner-model","text":"from django.db import models class Owner(models.Model): last_name = models.CharField(max_length=50) first_name = models.CharField(max_length=50) birth_date = models.DateField() def __str__(self): return f\"{self.last_name} {self.first_name}\"","title":"Owner Model"},{"location":"lab2/models/#car-model","text":"class Car(models.Model): license_plate = models.CharField(max_length=10, unique=True) make = models.CharField(max_length=50) model = models.CharField(max_length=50) color = models.CharField(max_length=20) def __str__(self): return f\"{self.make} {self.model} ({self.license_plate})\"","title":"Car Model"},{"location":"lab2/models/#drivinglicense-model","text":"class DrivingLicense(models.Model): owner = models.OneToOneField(Owner, on_delete=models.CASCADE) license_number = models.CharField(max_length=20, unique=True) document_number = models.CharField(max_length=20) type = models.CharField(max_length=10) issue_date = models.DateField() def __str__(self): return f\"License {self.license_number} ({self.owner})\"","title":"DrivingLicense Model"},{"location":"lab2/models/#ownership-model","text":"class Ownership(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) def __str__(self): return f\"{self.owner} owns {self.car}\"","title":"Ownership Model"},{"location":"lab2/models/#model-relationships","text":"Owner - DrivingLicense One-to-One relationship Each owner can have one driving license Cascade deletion when owner is deleted Owner - Car (through Ownership) Many-to-Many relationship Owners can own multiple cars Cars can have multiple owners (over time) Ownership model tracks the relationship period","title":"Model Relationships"},{"location":"lab2/models/#field-types","text":"Character Fields CharField : For text data with maximum length Used for names, license plates, etc. Date Fields DateField : For storing dates Used for birth dates, issue dates, etc. Relationship Fields OneToOneField : For one-to-one relationships ForeignKey : For many-to-one relationships","title":"Field Types"},{"location":"lab2/models/#model-features","text":"String Representation Custom __str__ methods Human-readable object representation Field Constraints Unique constraints Maximum length limits Required/optional fields Cascade Deletion Automatic deletion of related records Data integrity maintenance Data Validation Field type validation Unique constraint checking Required field validation","title":"Model Features"},{"location":"lab2/models/#database-schema","text":"CREATE TABLE Owner ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(50) NOT NULL, first_name VARCHAR(50) NOT NULL, birth_date DATE NOT NULL ); CREATE TABLE Car ( id INTEGER PRIMARY KEY AUTOINCREMENT, license_plate VARCHAR(10) UNIQUE NOT NULL, make VARCHAR(50) NOT NULL, model VARCHAR(50) NOT NULL, color VARCHAR(20) NOT NULL ); CREATE TABLE DrivingLicense ( id INTEGER PRIMARY KEY AUTOINCREMENT, owner_id INTEGER UNIQUE NOT NULL, license_number VARCHAR(20) UNIQUE NOT NULL, document_number VARCHAR(20) NOT NULL, type VARCHAR(10) NOT NULL, issue_date DATE NOT NULL, FOREIGN KEY (owner_id) REFERENCES Owner(id) ON DELETE CASCADE ); CREATE TABLE Ownership ( id INTEGER PRIMARY KEY AUTOINCREMENT, owner_id INTEGER NOT NULL, car_id INTEGER NOT NULL, start_date DATE NOT NULL, end_date DATE, FOREIGN KEY (owner_id) REFERENCES Owner(id) ON DELETE CASCADE, FOREIGN KEY (car_id) REFERENCES Car(id) ON DELETE CASCADE );","title":"Database Schema"},{"location":"lab2/overview/","text":"Lab 2 Overview \u00b6 Project Description \u00b6 Lab 2 implements a car ownership management system using Django framework. The system manages relationships between car owners, their vehicles, and driving licenses. Key Components \u00b6 Models Owner information management Car details tracking Driving license records Ownership relationship tracking Views List and detail views Create, update, delete operations Form handling and validation Forms Data input interfaces Validation rules User-friendly widgets Admin Interface Model registration Custom display and filtering Administrative operations URL Configuration RESTful routing Pattern matching View mapping Learning Objectives \u00b6 Understanding Django MVT architecture Implementing database models and relationships Creating views and templates Handling forms and user input Configuring admin interface Managing URL patterns","title":"Overview"},{"location":"lab2/overview/#lab-2-overview","text":"","title":"Lab 2 Overview"},{"location":"lab2/overview/#project-description","text":"Lab 2 implements a car ownership management system using Django framework. The system manages relationships between car owners, their vehicles, and driving licenses.","title":"Project Description"},{"location":"lab2/overview/#key-components","text":"Models Owner information management Car details tracking Driving license records Ownership relationship tracking Views List and detail views Create, update, delete operations Form handling and validation Forms Data input interfaces Validation rules User-friendly widgets Admin Interface Model registration Custom display and filtering Administrative operations URL Configuration RESTful routing Pattern matching View mapping","title":"Key Components"},{"location":"lab2/overview/#learning-objectives","text":"Understanding Django MVT architecture Implementing database models and relationships Creating views and templates Handling forms and user input Configuring admin interface Managing URL patterns","title":"Learning Objectives"},{"location":"lab2/urls/","text":"URL Configuration - Car Ownership System \u00b6 Overview \u00b6 Experiment 2 implements URL routing for the car ownership management system, defining patterns for various views and operations. URL Configuration \u00b6 Main URL Configuration \u00b6 from django.urls import path from . import views urlpatterns = [ # Owner URLs path('', views.owner_list, name='owner_list'), path('<int:owner_id>/', views.owner_detail, name='owner_detail'), path('create/', views.owner_create, name='owner_create'), path('<int:owner_id>/update/', views.owner_update, name='owner_update'), path('<int:owner_id>/delete/', views.owner_delete, name='owner_delete'), # Car URLs path('cars/', views.car_list, name='car_list'), path('cars/<int:car_id>/', views.car_detail, name='car_detail'), path('cars/create/', views.car_create, name='car_create'), path('cars/<int:car_id>/update/', views.car_update, name='car_update'), path('cars/<int:car_id>/delete/', views.car_delete, name='car_delete'), # DrivingLicense URLs path('licenses/', views.license_list, name='license_list'), path('licenses/<int:license_id>/', views.license_detail, name='license_detail'), path('licenses/create/', views.license_create, name='license_create'), path('licenses/<int:license_id>/update/', views.license_update, name='license_update'), path('licenses/<int:license_id>/delete/', views.license_delete, name='license_delete'), # Ownership URLs path('ownerships/', views.ownership_list, name='ownership_list'), path('ownerships/create/', views.ownership_create, name='ownership_create'), path('ownerships/<int:ownership_id>/update/', views.ownership_update, name='ownership_update'), path('ownerships/<int:ownership_id>/delete/', views.ownership_delete, name='ownership_delete'), ] URL Patterns \u00b6 Owner Management \u00b6 List View URL: / Name: owner_list View: owner_list Method: GET Detail View URL: /<owner_id>/ Name: owner_detail View: owner_detail Method: GET Create View URL: /create/ Name: owner_create View: owner_create Methods: GET, POST Update View URL: /<owner_id>/update/ Name: owner_update View: owner_update Methods: GET, POST Delete View URL: /<owner_id>/delete/ Name: owner_delete View: owner_delete Method: POST Car Management \u00b6 List View URL: /cars/ Name: car_list View: car_list Method: GET Detail View URL: /cars/<car_id>/ Name: car_detail View: car_detail Method: GET Create View URL: /cars/create/ Name: car_create View: car_create Methods: GET, POST Update View URL: /cars/<car_id>/update/ Name: car_update View: car_update Methods: GET, POST Delete View URL: /cars/<car_id>/delete/ Name: car_delete View: car_delete Method: POST DrivingLicense Management \u00b6 List View URL: /licenses/ Name: license_list View: license_list Method: GET Detail View URL: /licenses/<license_id>/ Name: license_detail View: license_detail Method: GET Create View URL: /licenses/create/ Name: license_create View: license_create Methods: GET, POST Update View URL: /licenses/<license_id>/update/ Name: license_update View: license_update Methods: GET, POST Delete View URL: /licenses/<license_id>/delete/ Name: license_delete View: license_delete Method: POST Ownership Management \u00b6 List View URL: /ownerships/ Name: ownership_list View: ownership_list Method: GET Create View URL: /ownerships/create/ Name: ownership_create View: ownership_create Methods: GET, POST Update View URL: /ownerships/<ownership_id>/update/ Name: ownership_update View: ownership_update Methods: GET, POST Delete View URL: /ownerships/<ownership_id>/delete/ Name: ownership_delete View: ownership_delete Method: POST URL Features \u00b6 Pattern Types Basic patterns ( /cars/ , /owners/ ) Dynamic segments ( <int:owner_id> ) Named URLs for reverse lookup View Mapping Function-based views CRUD operations List and detail views URL Organization Resource-based grouping Consistent naming RESTful structure URL Names Descriptive naming Reverse URL resolution Template URL references Usage Examples \u00b6 Template URL Tags \u00b6 <!-- Link to owner list --> <a href=\"{% url 'owner_list' %}\">All Owners</a> <!-- Link to owner detail --> <a href=\"{% url 'owner_detail' owner.id %}\">View Owner</a> <!-- Form action URL --> <form action=\"{% url 'owner_create' %}\" method=\"post\"> View URL Resolution \u00b6 from django.shortcuts import redirect from django.urls import reverse # Redirect to owner detail return redirect('owner_detail', owner_id=owner.id) # Get URL by name url = reverse('owner_list')","title":"URLs"},{"location":"lab2/urls/#url-configuration-car-ownership-system","text":"","title":"URL Configuration - Car Ownership System"},{"location":"lab2/urls/#overview","text":"Experiment 2 implements URL routing for the car ownership management system, defining patterns for various views and operations.","title":"Overview"},{"location":"lab2/urls/#url-configuration","text":"","title":"URL Configuration"},{"location":"lab2/urls/#main-url-configuration","text":"from django.urls import path from . import views urlpatterns = [ # Owner URLs path('', views.owner_list, name='owner_list'), path('<int:owner_id>/', views.owner_detail, name='owner_detail'), path('create/', views.owner_create, name='owner_create'), path('<int:owner_id>/update/', views.owner_update, name='owner_update'), path('<int:owner_id>/delete/', views.owner_delete, name='owner_delete'), # Car URLs path('cars/', views.car_list, name='car_list'), path('cars/<int:car_id>/', views.car_detail, name='car_detail'), path('cars/create/', views.car_create, name='car_create'), path('cars/<int:car_id>/update/', views.car_update, name='car_update'), path('cars/<int:car_id>/delete/', views.car_delete, name='car_delete'), # DrivingLicense URLs path('licenses/', views.license_list, name='license_list'), path('licenses/<int:license_id>/', views.license_detail, name='license_detail'), path('licenses/create/', views.license_create, name='license_create'), path('licenses/<int:license_id>/update/', views.license_update, name='license_update'), path('licenses/<int:license_id>/delete/', views.license_delete, name='license_delete'), # Ownership URLs path('ownerships/', views.ownership_list, name='ownership_list'), path('ownerships/create/', views.ownership_create, name='ownership_create'), path('ownerships/<int:ownership_id>/update/', views.ownership_update, name='ownership_update'), path('ownerships/<int:ownership_id>/delete/', views.ownership_delete, name='ownership_delete'), ]","title":"Main URL Configuration"},{"location":"lab2/urls/#url-patterns","text":"","title":"URL Patterns"},{"location":"lab2/urls/#owner-management","text":"List View URL: / Name: owner_list View: owner_list Method: GET Detail View URL: /<owner_id>/ Name: owner_detail View: owner_detail Method: GET Create View URL: /create/ Name: owner_create View: owner_create Methods: GET, POST Update View URL: /<owner_id>/update/ Name: owner_update View: owner_update Methods: GET, POST Delete View URL: /<owner_id>/delete/ Name: owner_delete View: owner_delete Method: POST","title":"Owner Management"},{"location":"lab2/urls/#car-management","text":"List View URL: /cars/ Name: car_list View: car_list Method: GET Detail View URL: /cars/<car_id>/ Name: car_detail View: car_detail Method: GET Create View URL: /cars/create/ Name: car_create View: car_create Methods: GET, POST Update View URL: /cars/<car_id>/update/ Name: car_update View: car_update Methods: GET, POST Delete View URL: /cars/<car_id>/delete/ Name: car_delete View: car_delete Method: POST","title":"Car Management"},{"location":"lab2/urls/#drivinglicense-management","text":"List View URL: /licenses/ Name: license_list View: license_list Method: GET Detail View URL: /licenses/<license_id>/ Name: license_detail View: license_detail Method: GET Create View URL: /licenses/create/ Name: license_create View: license_create Methods: GET, POST Update View URL: /licenses/<license_id>/update/ Name: license_update View: license_update Methods: GET, POST Delete View URL: /licenses/<license_id>/delete/ Name: license_delete View: license_delete Method: POST","title":"DrivingLicense Management"},{"location":"lab2/urls/#ownership-management","text":"List View URL: /ownerships/ Name: ownership_list View: ownership_list Method: GET Create View URL: /ownerships/create/ Name: ownership_create View: ownership_create Methods: GET, POST Update View URL: /ownerships/<ownership_id>/update/ Name: ownership_update View: ownership_update Methods: GET, POST Delete View URL: /ownerships/<ownership_id>/delete/ Name: ownership_delete View: ownership_delete Method: POST","title":"Ownership Management"},{"location":"lab2/urls/#url-features","text":"Pattern Types Basic patterns ( /cars/ , /owners/ ) Dynamic segments ( <int:owner_id> ) Named URLs for reverse lookup View Mapping Function-based views CRUD operations List and detail views URL Organization Resource-based grouping Consistent naming RESTful structure URL Names Descriptive naming Reverse URL resolution Template URL references","title":"URL Features"},{"location":"lab2/urls/#usage-examples","text":"","title":"Usage Examples"},{"location":"lab2/urls/#template-url-tags","text":"<!-- Link to owner list --> <a href=\"{% url 'owner_list' %}\">All Owners</a> <!-- Link to owner detail --> <a href=\"{% url 'owner_detail' owner.id %}\">View Owner</a> <!-- Form action URL --> <form action=\"{% url 'owner_create' %}\" method=\"post\">","title":"Template URL Tags"},{"location":"lab2/urls/#view-url-resolution","text":"from django.shortcuts import redirect from django.urls import reverse # Redirect to owner detail return redirect('owner_detail', owner_id=owner.id) # Get URL by name url = reverse('owner_list')","title":"View URL Resolution"},{"location":"lab2/views/","text":"Django Views Configuration \u00b6 Overview \u00b6 Experiment 2 implements various views for the car ownership management system, providing CRUD operations for owners, cars, and ownership records. View Classes and Functions \u00b6 Owner Views \u00b6 List View \u00b6 def owner_list(request): owners = Owner.objects.all() return render(request, 'owner_list.html', {'owners': owners}) Detail View \u00b6 def owner_detail(request, owner_id): owner = get_object_or_404(Owner, pk=owner_id) return render(request, 'owner_detail.html', {'owner': owner}) Create View \u00b6 def owner_create(request): if request.method == 'POST': form = OwnerForm(request.POST) if form.is_valid(): owner = form.save() return redirect('owner_detail', owner_id=owner.id) else: form = OwnerForm() return render(request, 'owner_form.html', {'form': form}) Update View \u00b6 def owner_update(request, owner_id): owner = get_object_or_404(Owner, pk=owner_id) if request.method == 'POST': form = OwnerForm(request.POST, instance=owner) if form.is_valid(): owner = form.save() return redirect('owner_detail', owner_id=owner.id) else: form = OwnerForm(instance=owner) return render(request, 'owner_form.html', {'form': form}) Delete View \u00b6 @require_POST def owner_delete(request, owner_id): owner = get_object_or_404(Owner, pk=owner_id) owner.delete() return redirect('owner_list') Car Owner Create and List View \u00b6 class CarOwnerCreateAndListView(View): def get(self, request): owners = Owner.objects.all() return JsonResponse({'owners': [ {'id': owner.id, 'name': str(owner)} for owner in owners ]}) def post(self, request): data = json.loads(request.body) owner = Owner.objects.create( last_name=data['last_name'], first_name=data['first_name'], birth_date=data['birth_date'] ) return JsonResponse({ 'id': owner.id, 'name': str(owner) }, status=201) View Features \u00b6 CRUD Operations Create: Form handling and data validation Read: List and detail views Update: Form pre-population and validation Delete: Object removal with confirmation Response Types HTML Templates JSON Responses (API) Redirects Error Handling 404 for missing objects Form validation errors Exception handling HTTP Methods GET for retrieving data POST for creating/updating DELETE for removing records Template Integration \u00b6 Template Context Object lists Single objects Form instances Error messages Template Files owner_list.html owner_detail.html owner_form.html URL Patterns \u00b6 urlpatterns = [ path('', owner_list, name='owner_list'), path('<int:owner_id>/', owner_detail, name='owner_detail'), path('create/', owner_create, name='owner_create'), path('<int:owner_id>/update/', owner_update, name='owner_update'), path('<int:owner_id>/delete/', owner_delete, name='owner_delete'), path('api/owners/', CarOwnerCreateAndListView.as_view(), name='api_owners'), ]","title":"Views"},{"location":"lab2/views/#django-views-configuration","text":"","title":"Django Views Configuration"},{"location":"lab2/views/#overview","text":"Experiment 2 implements various views for the car ownership management system, providing CRUD operations for owners, cars, and ownership records.","title":"Overview"},{"location":"lab2/views/#view-classes-and-functions","text":"","title":"View Classes and Functions"},{"location":"lab2/views/#owner-views","text":"","title":"Owner Views"},{"location":"lab2/views/#list-view","text":"def owner_list(request): owners = Owner.objects.all() return render(request, 'owner_list.html', {'owners': owners})","title":"List View"},{"location":"lab2/views/#detail-view","text":"def owner_detail(request, owner_id): owner = get_object_or_404(Owner, pk=owner_id) return render(request, 'owner_detail.html', {'owner': owner})","title":"Detail View"},{"location":"lab2/views/#create-view","text":"def owner_create(request): if request.method == 'POST': form = OwnerForm(request.POST) if form.is_valid(): owner = form.save() return redirect('owner_detail', owner_id=owner.id) else: form = OwnerForm() return render(request, 'owner_form.html', {'form': form})","title":"Create View"},{"location":"lab2/views/#update-view","text":"def owner_update(request, owner_id): owner = get_object_or_404(Owner, pk=owner_id) if request.method == 'POST': form = OwnerForm(request.POST, instance=owner) if form.is_valid(): owner = form.save() return redirect('owner_detail', owner_id=owner.id) else: form = OwnerForm(instance=owner) return render(request, 'owner_form.html', {'form': form})","title":"Update View"},{"location":"lab2/views/#delete-view","text":"@require_POST def owner_delete(request, owner_id): owner = get_object_or_404(Owner, pk=owner_id) owner.delete() return redirect('owner_list')","title":"Delete View"},{"location":"lab2/views/#car-owner-create-and-list-view","text":"class CarOwnerCreateAndListView(View): def get(self, request): owners = Owner.objects.all() return JsonResponse({'owners': [ {'id': owner.id, 'name': str(owner)} for owner in owners ]}) def post(self, request): data = json.loads(request.body) owner = Owner.objects.create( last_name=data['last_name'], first_name=data['first_name'], birth_date=data['birth_date'] ) return JsonResponse({ 'id': owner.id, 'name': str(owner) }, status=201)","title":"Car Owner Create and List View"},{"location":"lab2/views/#view-features","text":"CRUD Operations Create: Form handling and data validation Read: List and detail views Update: Form pre-population and validation Delete: Object removal with confirmation Response Types HTML Templates JSON Responses (API) Redirects Error Handling 404 for missing objects Form validation errors Exception handling HTTP Methods GET for retrieving data POST for creating/updating DELETE for removing records","title":"View Features"},{"location":"lab2/views/#template-integration","text":"Template Context Object lists Single objects Form instances Error messages Template Files owner_list.html owner_detail.html owner_form.html","title":"Template Integration"},{"location":"lab2/views/#url-patterns","text":"urlpatterns = [ path('', owner_list, name='owner_list'), path('<int:owner_id>/', owner_detail, name='owner_detail'), path('create/', owner_create, name='owner_create'), path('<int:owner_id>/update/', owner_update, name='owner_update'), path('<int:owner_id>/delete/', owner_delete, name='owner_delete'), path('api/owners/', CarOwnerCreateAndListView.as_view(), name='api_owners'), ]","title":"URL Patterns"},{"location":"lab3/admin/","text":"Admin Configuration \u00b6 Overview \u00b6 Experiment 3 configures the Django admin interface for managing the flight booking system. Admin Classes \u00b6 Flight Admin \u00b6 from django.contrib import admin from .models import Flight @admin.register(Flight) class FlightAdmin(admin.ModelAdmin): list_display = ( 'flight_number', 'airline', 'departure_time', 'arrival_time', 'flight_type', 'gate_number' ) list_filter = ('airline', 'flight_type') search_fields = ('flight_number', 'airline') date_hierarchy = 'departure_time' Passenger Admin \u00b6 from .models import Passenger @admin.register(Passenger) class PassengerAdmin(admin.ModelAdmin): list_display = ('username',) search_fields = ('username',) Booking Admin \u00b6 from .models import Booking @admin.register(Booking) class BookingAdmin(admin.ModelAdmin): list_display = ('passenger', 'flight', 'seat_number') list_filter = ('flight',) search_fields = ( 'passenger__username', 'flight__flight_number', 'seat_number' ) Comment Admin \u00b6 from .models import Comment @admin.register(Comment) class CommentAdmin(admin.ModelAdmin): list_display = ( 'flight', 'commenter_name', 'rating', 'comment_date' ) list_filter = ('rating', 'comment_date') search_fields = ('flight__flight_number', 'commenter_name') date_hierarchy = 'comment_date' Admin Features \u00b6 List Display Customized column display Sortable columns Clickable links Date formatting Filtering Filter by fields Date hierarchy Search functionality Advanced filtering Search Field-based search Related field search Case-insensitive search Multiple field search Date Navigation Date hierarchy Date range filtering Date-based navigation Admin Interface \u00b6 Model Management Add new records Edit existing records Delete records Bulk actions List Views Pagination Column sorting Filter sidebar Search box Detail Views Form layout Field grouping Related objects Inline editing Actions Built-in actions Custom actions Bulk operations Action confirmation Usage Instructions \u00b6 Accessing Admin http://localhost:8000/admin/ Authentication Login required Staff status required Permission checks Managing Records Create records Update records Delete records Search records Filtering Data Use filter sidebar Search functionality Date navigation Advanced filters","title":"Admin"},{"location":"lab3/admin/#admin-configuration","text":"","title":"Admin Configuration"},{"location":"lab3/admin/#overview","text":"Experiment 3 configures the Django admin interface for managing the flight booking system.","title":"Overview"},{"location":"lab3/admin/#admin-classes","text":"","title":"Admin Classes"},{"location":"lab3/admin/#flight-admin","text":"from django.contrib import admin from .models import Flight @admin.register(Flight) class FlightAdmin(admin.ModelAdmin): list_display = ( 'flight_number', 'airline', 'departure_time', 'arrival_time', 'flight_type', 'gate_number' ) list_filter = ('airline', 'flight_type') search_fields = ('flight_number', 'airline') date_hierarchy = 'departure_time'","title":"Flight Admin"},{"location":"lab3/admin/#passenger-admin","text":"from .models import Passenger @admin.register(Passenger) class PassengerAdmin(admin.ModelAdmin): list_display = ('username',) search_fields = ('username',)","title":"Passenger Admin"},{"location":"lab3/admin/#booking-admin","text":"from .models import Booking @admin.register(Booking) class BookingAdmin(admin.ModelAdmin): list_display = ('passenger', 'flight', 'seat_number') list_filter = ('flight',) search_fields = ( 'passenger__username', 'flight__flight_number', 'seat_number' )","title":"Booking Admin"},{"location":"lab3/admin/#comment-admin","text":"from .models import Comment @admin.register(Comment) class CommentAdmin(admin.ModelAdmin): list_display = ( 'flight', 'commenter_name', 'rating', 'comment_date' ) list_filter = ('rating', 'comment_date') search_fields = ('flight__flight_number', 'commenter_name') date_hierarchy = 'comment_date'","title":"Comment Admin"},{"location":"lab3/admin/#admin-features","text":"List Display Customized column display Sortable columns Clickable links Date formatting Filtering Filter by fields Date hierarchy Search functionality Advanced filtering Search Field-based search Related field search Case-insensitive search Multiple field search Date Navigation Date hierarchy Date range filtering Date-based navigation","title":"Admin Features"},{"location":"lab3/admin/#admin-interface","text":"Model Management Add new records Edit existing records Delete records Bulk actions List Views Pagination Column sorting Filter sidebar Search box Detail Views Form layout Field grouping Related objects Inline editing Actions Built-in actions Custom actions Bulk operations Action confirmation","title":"Admin Interface"},{"location":"lab3/admin/#usage-instructions","text":"Accessing Admin http://localhost:8000/admin/ Authentication Login required Staff status required Permission checks Managing Records Create records Update records Delete records Search records Filtering Data Use filter sidebar Search functionality Date navigation Advanced filters","title":"Usage Instructions"},{"location":"lab3/forms/","text":"Serializers Configuration \u00b6 Overview \u00b6 Experiment 3 implements serializers using Django REST Framework for the flight booking system. Serializer Classes \u00b6 Flight Serializer \u00b6 from rest_framework import serializers from .models import Flight class FlightSerializer(serializers.ModelSerializer): class Meta: model = Flight fields = [ 'id', 'flight_number', 'airline', 'departure_time', 'arrival_time', 'flight_type', 'gate_number' ] Passenger Serializer \u00b6 from .models import Passenger class PassengerSerializer(serializers.ModelSerializer): class Meta: model = Passenger fields = ['id', 'username', 'password', 'bookings'] Booking Serializer \u00b6 from .models import Booking class BookingSerializer(serializers.ModelSerializer): class Meta: model = Booking fields = ['id', 'passenger', 'flight', 'seat_number'] Comment Serializer \u00b6 from .models import Comment class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = [ 'id', 'flight', 'comment_text', 'rating', 'commenter_name', 'comment_date' ] Serializer Features \u00b6 Field Serialization Model field mapping Relationship handling Custom field types Field validation Data Validation Model validation Field validation Custom validators Error handling Nested Relationships Foreign key serialization Many-to-many serialization Nested object creation Related field handling Data Formatting JSON serialization Date/time formatting Field type conversion Custom output formatting Usage Examples \u00b6 Creating Objects \u00b6 # Creating a flight data = { 'flight_number': 'CA123', 'airline': 'Air China', 'departure_time': '2024-02-28T10:00:00Z', 'arrival_time': '2024-02-28T12:00:00Z', 'flight_type': 'DEP', 'gate_number': 'A1' } serializer = FlightSerializer(data=data) if serializer.is_valid(): flight = serializer.save() Updating Objects \u00b6 # Updating a booking booking = Booking.objects.get(id=1) data = {'seat_number': 'B12'} serializer = BookingSerializer(booking, data=data, partial=True) if serializer.is_valid(): booking = serializer.save() Validation Examples \u00b6 Custom Field Validation \u00b6 class CommentSerializer(serializers.ModelSerializer): def validate_rating(self, value): if value < 1 or value > 10: raise serializers.ValidationError( \"Rating must be between 1 and 10\" ) return value class Meta: model = Comment fields = '__all__' Object-Level Validation \u00b6 class BookingSerializer(serializers.ModelSerializer): def validate(self, data): # Check if seat is available if Booking.objects.filter( flight=data['flight'], seat_number=data['seat_number'] ).exists(): raise serializers.ValidationError( \"This seat is already booked\" ) return data class Meta: model = Booking fields = '__all__' Response Formats \u00b6 Success Response \u00b6 { \"id\": 1, \"flight_number\": \"CA123\", \"airline\": \"Air China\", \"departure_time\": \"2024-02-28T10:00:00Z\", \"arrival_time\": \"2024-02-28T12:00:00Z\", \"flight_type\": \"DEP\", \"gate_number\": \"A1\" } Error Response \u00b6 { \"rating\": [\"Ensure this value is less than or equal to 10.\"], \"seat_number\": [\"This seat is already booked\"] }","title":"Forms"},{"location":"lab3/forms/#serializers-configuration","text":"","title":"Serializers Configuration"},{"location":"lab3/forms/#overview","text":"Experiment 3 implements serializers using Django REST Framework for the flight booking system.","title":"Overview"},{"location":"lab3/forms/#serializer-classes","text":"","title":"Serializer Classes"},{"location":"lab3/forms/#flight-serializer","text":"from rest_framework import serializers from .models import Flight class FlightSerializer(serializers.ModelSerializer): class Meta: model = Flight fields = [ 'id', 'flight_number', 'airline', 'departure_time', 'arrival_time', 'flight_type', 'gate_number' ]","title":"Flight Serializer"},{"location":"lab3/forms/#passenger-serializer","text":"from .models import Passenger class PassengerSerializer(serializers.ModelSerializer): class Meta: model = Passenger fields = ['id', 'username', 'password', 'bookings']","title":"Passenger Serializer"},{"location":"lab3/forms/#booking-serializer","text":"from .models import Booking class BookingSerializer(serializers.ModelSerializer): class Meta: model = Booking fields = ['id', 'passenger', 'flight', 'seat_number']","title":"Booking Serializer"},{"location":"lab3/forms/#comment-serializer","text":"from .models import Comment class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = [ 'id', 'flight', 'comment_text', 'rating', 'commenter_name', 'comment_date' ]","title":"Comment Serializer"},{"location":"lab3/forms/#serializer-features","text":"Field Serialization Model field mapping Relationship handling Custom field types Field validation Data Validation Model validation Field validation Custom validators Error handling Nested Relationships Foreign key serialization Many-to-many serialization Nested object creation Related field handling Data Formatting JSON serialization Date/time formatting Field type conversion Custom output formatting","title":"Serializer Features"},{"location":"lab3/forms/#usage-examples","text":"","title":"Usage Examples"},{"location":"lab3/forms/#creating-objects","text":"# Creating a flight data = { 'flight_number': 'CA123', 'airline': 'Air China', 'departure_time': '2024-02-28T10:00:00Z', 'arrival_time': '2024-02-28T12:00:00Z', 'flight_type': 'DEP', 'gate_number': 'A1' } serializer = FlightSerializer(data=data) if serializer.is_valid(): flight = serializer.save()","title":"Creating Objects"},{"location":"lab3/forms/#updating-objects","text":"# Updating a booking booking = Booking.objects.get(id=1) data = {'seat_number': 'B12'} serializer = BookingSerializer(booking, data=data, partial=True) if serializer.is_valid(): booking = serializer.save()","title":"Updating Objects"},{"location":"lab3/forms/#validation-examples","text":"","title":"Validation Examples"},{"location":"lab3/forms/#custom-field-validation","text":"class CommentSerializer(serializers.ModelSerializer): def validate_rating(self, value): if value < 1 or value > 10: raise serializers.ValidationError( \"Rating must be between 1 and 10\" ) return value class Meta: model = Comment fields = '__all__'","title":"Custom Field Validation"},{"location":"lab3/forms/#object-level-validation","text":"class BookingSerializer(serializers.ModelSerializer): def validate(self, data): # Check if seat is available if Booking.objects.filter( flight=data['flight'], seat_number=data['seat_number'] ).exists(): raise serializers.ValidationError( \"This seat is already booked\" ) return data class Meta: model = Booking fields = '__all__'","title":"Object-Level Validation"},{"location":"lab3/forms/#response-formats","text":"","title":"Response Formats"},{"location":"lab3/forms/#success-response","text":"{ \"id\": 1, \"flight_number\": \"CA123\", \"airline\": \"Air China\", \"departure_time\": \"2024-02-28T10:00:00Z\", \"arrival_time\": \"2024-02-28T12:00:00Z\", \"flight_type\": \"DEP\", \"gate_number\": \"A1\" }","title":"Success Response"},{"location":"lab3/forms/#error-response","text":"{ \"rating\": [\"Ensure this value is less than or equal to 10.\"], \"seat_number\": [\"This seat is already booked\"] }","title":"Error Response"},{"location":"lab3/models/","text":"Models Configuration \u00b6 Overview \u00b6 Experiment 3 implements the data models for a flight booking system using Django models. The system includes flights, passengers, bookings, and comments. Model Classes \u00b6 Flight Model \u00b6 from django.db import models class Flight(models.Model): flight_number = models.CharField(max_length=50) airline = models.CharField(max_length=100) departure_time = models.DateTimeField() arrival_time = models.DateTimeField() FLIGHT_TYPES = ( ('ARR', 'Arrival'), ('DEP', 'Departure') ) flight_type = models.CharField(max_length=3, choices=FLIGHT_TYPES) gate_number = models.CharField(max_length=10) def __str__(self): return f\"{self.flight_number}\" Passenger Model \u00b6 class Passenger(models.Model): username = models.CharField(max_length=255, unique=True) password = models.CharField(max_length=255) bookings = models.ManyToManyField(Flight, through='Booking') def __str__(self): return self.username Booking Model \u00b6 class Booking(models.Model): passenger = models.ForeignKey(Passenger, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) seat_number = models.CharField(max_length=10) def __str__(self): return f\"{self.passenger.username} - {self.flight.flight_number}\" Comment Model \u00b6 class Comment(models.Model): flight = models.ForeignKey(Flight, on_delete=models.CASCADE) comment_text = models.TextField() rating = models.IntegerField(choices=[(i, i) for i in range(1, 11)]) commenter_name = models.CharField(max_length=100) comment_date = models.DateField(auto_now_add=True) def __str__(self): return f\"{self.flight.flight_number} - {self.commenter_name}\" Model Relationships \u00b6 Flight - Passenger (Many-to-Many through Booking) Passengers can book multiple flights Flights can have multiple passengers Booking model tracks seat assignments Flight - Comment (One-to-Many) Each flight can have multiple comments Each comment belongs to one flight Field Types \u00b6 Text Fields CharField: For short text (flight numbers, names) TextField: For longer text (comments) Date/Time Fields DateTimeField: For flight times DateField: For comment dates Relationship Fields ForeignKey: For one-to-many relationships ManyToManyField: For many-to-many relationships Choice Fields Flight type choices (ARR/DEP) Rating choices (1-10) Model Features \u00b6 String Representation Custom str methods Human-readable output Field Constraints Maximum length limits Unique constraints Required fields Automatic Fields Auto-add dates Auto-incrementing IDs Data Validation Field type validation Choice field validation Relationship integrity","title":"Models"},{"location":"lab3/models/#models-configuration","text":"","title":"Models Configuration"},{"location":"lab3/models/#overview","text":"Experiment 3 implements the data models for a flight booking system using Django models. The system includes flights, passengers, bookings, and comments.","title":"Overview"},{"location":"lab3/models/#model-classes","text":"","title":"Model Classes"},{"location":"lab3/models/#flight-model","text":"from django.db import models class Flight(models.Model): flight_number = models.CharField(max_length=50) airline = models.CharField(max_length=100) departure_time = models.DateTimeField() arrival_time = models.DateTimeField() FLIGHT_TYPES = ( ('ARR', 'Arrival'), ('DEP', 'Departure') ) flight_type = models.CharField(max_length=3, choices=FLIGHT_TYPES) gate_number = models.CharField(max_length=10) def __str__(self): return f\"{self.flight_number}\"","title":"Flight Model"},{"location":"lab3/models/#passenger-model","text":"class Passenger(models.Model): username = models.CharField(max_length=255, unique=True) password = models.CharField(max_length=255) bookings = models.ManyToManyField(Flight, through='Booking') def __str__(self): return self.username","title":"Passenger Model"},{"location":"lab3/models/#booking-model","text":"class Booking(models.Model): passenger = models.ForeignKey(Passenger, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) seat_number = models.CharField(max_length=10) def __str__(self): return f\"{self.passenger.username} - {self.flight.flight_number}\"","title":"Booking Model"},{"location":"lab3/models/#comment-model","text":"class Comment(models.Model): flight = models.ForeignKey(Flight, on_delete=models.CASCADE) comment_text = models.TextField() rating = models.IntegerField(choices=[(i, i) for i in range(1, 11)]) commenter_name = models.CharField(max_length=100) comment_date = models.DateField(auto_now_add=True) def __str__(self): return f\"{self.flight.flight_number} - {self.commenter_name}\"","title":"Comment Model"},{"location":"lab3/models/#model-relationships","text":"Flight - Passenger (Many-to-Many through Booking) Passengers can book multiple flights Flights can have multiple passengers Booking model tracks seat assignments Flight - Comment (One-to-Many) Each flight can have multiple comments Each comment belongs to one flight","title":"Model Relationships"},{"location":"lab3/models/#field-types","text":"Text Fields CharField: For short text (flight numbers, names) TextField: For longer text (comments) Date/Time Fields DateTimeField: For flight times DateField: For comment dates Relationship Fields ForeignKey: For one-to-many relationships ManyToManyField: For many-to-many relationships Choice Fields Flight type choices (ARR/DEP) Rating choices (1-10)","title":"Field Types"},{"location":"lab3/models/#model-features","text":"String Representation Custom str methods Human-readable output Field Constraints Maximum length limits Unique constraints Required fields Automatic Fields Auto-add dates Auto-incrementing IDs Data Validation Field type validation Choice field validation Relationship integrity","title":"Model Features"},{"location":"lab3/practical/","text":"Practical Tasks - Air System \u00b6 Overview \u00b6 Experiment 3 implements a complete flight booking system using Django REST Framework. The system includes flight management, passenger bookings, and a comment system. Task 1: API Development \u00b6 Requirements \u00b6 Create RESTful API endpoints Implement CRUD operations Handle user authentication Process JSON data Implementation \u00b6 # views.py from rest_framework import viewsets from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class FlightViewSet(viewsets.ModelViewSet): queryset = Flight.objects.all() serializer_class = FlightSerializer class LoginView(APIView): def post(self, request): username = request.data.get('username') password = request.data.get('password') try: passenger = Passenger.objects.get(username=username, password=password) serializer = PassengerSerializer(passenger) return Response(serializer.data) except Passenger.DoesNotExist: return Response({'error': 'Invalid credentials'}, status=401) Task 2: Data Modeling \u00b6 Requirements \u00b6 Design database schema Define model relationships Implement validation rules Handle data integrity Implementation \u00b6 # models.py from django.db import models class Flight(models.Model): flight_number = models.CharField(max_length=50) airline = models.CharField(max_length=100) departure_time = models.DateTimeField() arrival_time = models.DateTimeField() flight_type = models.CharField(max_length=3, choices=[('ARR', 'Arrival'), ('DEP', 'Departure')]) gate_number = models.CharField(max_length=10) class Booking(models.Model): passenger = models.ForeignKey(Passenger, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) seat_number = models.CharField(max_length=10) Task 3: Frontend Integration \u00b6 Requirements \u00b6 Create API endpoints Handle CORS Process API responses Implement error handling Implementation \u00b6 // frontend.js async function loginUser(username, password) { try { const response = await fetch('http://localhost:8000/api/login/', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ username, password }), }); const data = await response.json(); if (response.ok) { return data; } else { throw new Error(data.error); } } catch (error) { console.error('Login failed:', error); throw error; } } async function getFlights() { try { const response = await fetch('http://localhost:8000/api/flights/'); const flights = await response.json(); return flights; } catch (error) { console.error('Failed to fetch flights:', error); throw error; } } Task 4: Testing \u00b6 API Testing \u00b6 # tests.py from rest_framework.test import APITestCase from django.urls import reverse from .models import Flight, Passenger class FlightAPITests(APITestCase): def setUp(self): self.flight = Flight.objects.create( flight_number='CA123', airline='Air China', departure_time='2024-02-28T10:00:00Z', arrival_time='2024-02-28T12:00:00Z', flight_type='DEP', gate_number='A1' ) def test_list_flights(self): url = reverse('flight-list') response = self.client.get(url) self.assertEqual(response.status_code, 200) self.assertEqual(len(response.data), 1) def test_create_booking(self): url = reverse('booking-list') data = { 'flight': self.flight.id, 'seat_number': 'A1' } response = self.client.post(url, data) self.assertEqual(response.status_code, 201) Task 5: Documentation \u00b6 API Documentation \u00b6 Flight Endpoints # List all flights GET /api/flights/ # Create a new flight POST /api/flights/ Content-Type: application/json { \"flight_number\": \"CA123\", \"airline\": \"Air China\", \"departure_time\": \"2024-02-28T10:00:00Z\", \"arrival_time\": \"2024-02-28T12:00:00Z\", \"flight_type\": \"DEP\", \"gate_number\": \"A1\" } Booking Endpoints # Create a new booking POST /api/bookings/ Content-Type: application/json { \"flight\": 1, \"seat_number\": \"A1\" } Deployment Steps \u00b6 Database Setup python manage.py makemigrations python manage.py migrate Create Superuser python manage.py createsuperuser Run Development Server python manage.py runserver Security Considerations \u00b6 Authentication Implement user authentication Secure password storage Session management Data Validation Input sanitization Data type validation Business rule validation Error Handling Proper error messages Status code usage Exception handling API Security Rate limiting CORS configuration Token authentication","title":"Practical"},{"location":"lab3/practical/#practical-tasks-air-system","text":"","title":"Practical Tasks - Air System"},{"location":"lab3/practical/#overview","text":"Experiment 3 implements a complete flight booking system using Django REST Framework. The system includes flight management, passenger bookings, and a comment system.","title":"Overview"},{"location":"lab3/practical/#task-1-api-development","text":"","title":"Task 1: API Development"},{"location":"lab3/practical/#requirements","text":"Create RESTful API endpoints Implement CRUD operations Handle user authentication Process JSON data","title":"Requirements"},{"location":"lab3/practical/#implementation","text":"# views.py from rest_framework import viewsets from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class FlightViewSet(viewsets.ModelViewSet): queryset = Flight.objects.all() serializer_class = FlightSerializer class LoginView(APIView): def post(self, request): username = request.data.get('username') password = request.data.get('password') try: passenger = Passenger.objects.get(username=username, password=password) serializer = PassengerSerializer(passenger) return Response(serializer.data) except Passenger.DoesNotExist: return Response({'error': 'Invalid credentials'}, status=401)","title":"Implementation"},{"location":"lab3/practical/#task-2-data-modeling","text":"","title":"Task 2: Data Modeling"},{"location":"lab3/practical/#requirements_1","text":"Design database schema Define model relationships Implement validation rules Handle data integrity","title":"Requirements"},{"location":"lab3/practical/#implementation_1","text":"# models.py from django.db import models class Flight(models.Model): flight_number = models.CharField(max_length=50) airline = models.CharField(max_length=100) departure_time = models.DateTimeField() arrival_time = models.DateTimeField() flight_type = models.CharField(max_length=3, choices=[('ARR', 'Arrival'), ('DEP', 'Departure')]) gate_number = models.CharField(max_length=10) class Booking(models.Model): passenger = models.ForeignKey(Passenger, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) seat_number = models.CharField(max_length=10)","title":"Implementation"},{"location":"lab3/practical/#task-3-frontend-integration","text":"","title":"Task 3: Frontend Integration"},{"location":"lab3/practical/#requirements_2","text":"Create API endpoints Handle CORS Process API responses Implement error handling","title":"Requirements"},{"location":"lab3/practical/#implementation_2","text":"// frontend.js async function loginUser(username, password) { try { const response = await fetch('http://localhost:8000/api/login/', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ username, password }), }); const data = await response.json(); if (response.ok) { return data; } else { throw new Error(data.error); } } catch (error) { console.error('Login failed:', error); throw error; } } async function getFlights() { try { const response = await fetch('http://localhost:8000/api/flights/'); const flights = await response.json(); return flights; } catch (error) { console.error('Failed to fetch flights:', error); throw error; } }","title":"Implementation"},{"location":"lab3/practical/#task-4-testing","text":"","title":"Task 4: Testing"},{"location":"lab3/practical/#api-testing","text":"# tests.py from rest_framework.test import APITestCase from django.urls import reverse from .models import Flight, Passenger class FlightAPITests(APITestCase): def setUp(self): self.flight = Flight.objects.create( flight_number='CA123', airline='Air China', departure_time='2024-02-28T10:00:00Z', arrival_time='2024-02-28T12:00:00Z', flight_type='DEP', gate_number='A1' ) def test_list_flights(self): url = reverse('flight-list') response = self.client.get(url) self.assertEqual(response.status_code, 200) self.assertEqual(len(response.data), 1) def test_create_booking(self): url = reverse('booking-list') data = { 'flight': self.flight.id, 'seat_number': 'A1' } response = self.client.post(url, data) self.assertEqual(response.status_code, 201)","title":"API Testing"},{"location":"lab3/practical/#task-5-documentation","text":"","title":"Task 5: Documentation"},{"location":"lab3/practical/#api-documentation","text":"Flight Endpoints # List all flights GET /api/flights/ # Create a new flight POST /api/flights/ Content-Type: application/json { \"flight_number\": \"CA123\", \"airline\": \"Air China\", \"departure_time\": \"2024-02-28T10:00:00Z\", \"arrival_time\": \"2024-02-28T12:00:00Z\", \"flight_type\": \"DEP\", \"gate_number\": \"A1\" } Booking Endpoints # Create a new booking POST /api/bookings/ Content-Type: application/json { \"flight\": 1, \"seat_number\": \"A1\" }","title":"API Documentation"},{"location":"lab3/practical/#deployment-steps","text":"Database Setup python manage.py makemigrations python manage.py migrate Create Superuser python manage.py createsuperuser Run Development Server python manage.py runserver","title":"Deployment Steps"},{"location":"lab3/practical/#security-considerations","text":"Authentication Implement user authentication Secure password storage Session management Data Validation Input sanitization Data type validation Business rule validation Error Handling Proper error messages Status code usage Exception handling API Security Rate limiting CORS configuration Token authentication","title":"Security Considerations"},{"location":"lab3/urls/","text":"URL Configuration \u00b6 Overview \u00b6 Experiment 3 uses Django REST Framework's router system to automatically generate API URLs for the flight booking system. Main URL Configuration \u00b6 from django.urls import path, include from rest_framework.routers import DefaultRouter from . import views router = DefaultRouter() router.register(r'flights', views.FlightViewSet) router.register(r'passengers', views.PassengerViewSet) router.register(r'bookings', views.BookingViewSet) router.register(r'comments', views.CommentViewSet) urlpatterns = [ path('api/', include(router.urls)), ] API Endpoints \u00b6 Flight Endpoints \u00b6 GET /api/flights/ : List all flights POST /api/flights/ : Create new flight GET /api/flights/{id}/ : Retrieve flight details PUT /api/flights/{id}/ : Update flight information PATCH /api/flights/{id}/ : Partially update flight DELETE /api/flights/{id}/ : Delete flight Passenger Endpoints \u00b6 GET /api/passengers/ : List all passengers POST /api/passengers/ : Register new passenger GET /api/passengers/{id}/ : Retrieve passenger details PUT /api/passengers/{id}/ : Update passenger information PATCH /api/passengers/{id}/ : Partially update passenger DELETE /api/passengers/{id}/ : Delete passenger Booking Endpoints \u00b6 GET /api/bookings/ : List all bookings POST /api/bookings/ : Create new booking GET /api/bookings/{id}/ : Retrieve booking details PUT /api/bookings/{id}/ : Update booking PATCH /api/bookings/{id}/ : Partially update booking DELETE /api/bookings/{id}/ : Delete booking Comment Endpoints \u00b6 GET /api/comments/ : List all comments POST /api/comments/ : Create new comment GET /api/comments/{id}/ : Retrieve comment details PUT /api/comments/{id}/ : Update comment PATCH /api/comments/{id}/ : Partially update comment DELETE /api/comments/{id}/ : Delete comment Usage Examples \u00b6 HTTP Request Examples \u00b6 List Flights GET /api/flights/ Accept: application/json Create Booking POST /api/bookings/ Content-Type: application/json { \"passenger\": 1, \"flight\": 2, \"seat_number\": \"12A\" } Update Flight Information PUT /api/flights/1/ Content-Type: application/json { \"flight_number\": \"CA123\", \"departure\": \"Beijing\", \"destination\": \"Shanghai\", \"departure_time\": \"2024-03-20T10:00:00Z\", \"arrival_time\": \"2024-03-20T12:00:00Z\", \"price\": \"599.99\" } Delete Booking DELETE /api/bookings/1/ CORS Configuration \u00b6 To support cross-origin requests, add the following settings in settings.py : ```python INSTALLED_APPS = [ ... 'corsheaders', ... ] MIDDLEWARE = [ 'corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', ... ] Allow all origins in development \u00b6 CORS_ALLOW_ALL_ORIGINS = True","title":"URLs"},{"location":"lab3/urls/#url-configuration","text":"","title":"URL Configuration"},{"location":"lab3/urls/#overview","text":"Experiment 3 uses Django REST Framework's router system to automatically generate API URLs for the flight booking system.","title":"Overview"},{"location":"lab3/urls/#main-url-configuration","text":"from django.urls import path, include from rest_framework.routers import DefaultRouter from . import views router = DefaultRouter() router.register(r'flights', views.FlightViewSet) router.register(r'passengers', views.PassengerViewSet) router.register(r'bookings', views.BookingViewSet) router.register(r'comments', views.CommentViewSet) urlpatterns = [ path('api/', include(router.urls)), ]","title":"Main URL Configuration"},{"location":"lab3/urls/#api-endpoints","text":"","title":"API Endpoints"},{"location":"lab3/urls/#flight-endpoints","text":"GET /api/flights/ : List all flights POST /api/flights/ : Create new flight GET /api/flights/{id}/ : Retrieve flight details PUT /api/flights/{id}/ : Update flight information PATCH /api/flights/{id}/ : Partially update flight DELETE /api/flights/{id}/ : Delete flight","title":"Flight Endpoints"},{"location":"lab3/urls/#passenger-endpoints","text":"GET /api/passengers/ : List all passengers POST /api/passengers/ : Register new passenger GET /api/passengers/{id}/ : Retrieve passenger details PUT /api/passengers/{id}/ : Update passenger information PATCH /api/passengers/{id}/ : Partially update passenger DELETE /api/passengers/{id}/ : Delete passenger","title":"Passenger Endpoints"},{"location":"lab3/urls/#booking-endpoints","text":"GET /api/bookings/ : List all bookings POST /api/bookings/ : Create new booking GET /api/bookings/{id}/ : Retrieve booking details PUT /api/bookings/{id}/ : Update booking PATCH /api/bookings/{id}/ : Partially update booking DELETE /api/bookings/{id}/ : Delete booking","title":"Booking Endpoints"},{"location":"lab3/urls/#comment-endpoints","text":"GET /api/comments/ : List all comments POST /api/comments/ : Create new comment GET /api/comments/{id}/ : Retrieve comment details PUT /api/comments/{id}/ : Update comment PATCH /api/comments/{id}/ : Partially update comment DELETE /api/comments/{id}/ : Delete comment","title":"Comment Endpoints"},{"location":"lab3/urls/#usage-examples","text":"","title":"Usage Examples"},{"location":"lab3/urls/#http-request-examples","text":"List Flights GET /api/flights/ Accept: application/json Create Booking POST /api/bookings/ Content-Type: application/json { \"passenger\": 1, \"flight\": 2, \"seat_number\": \"12A\" } Update Flight Information PUT /api/flights/1/ Content-Type: application/json { \"flight_number\": \"CA123\", \"departure\": \"Beijing\", \"destination\": \"Shanghai\", \"departure_time\": \"2024-03-20T10:00:00Z\", \"arrival_time\": \"2024-03-20T12:00:00Z\", \"price\": \"599.99\" } Delete Booking DELETE /api/bookings/1/","title":"HTTP Request Examples"},{"location":"lab3/urls/#cors-configuration","text":"To support cross-origin requests, add the following settings in settings.py : ```python INSTALLED_APPS = [ ... 'corsheaders', ... ] MIDDLEWARE = [ 'corsheaders.middleware.CorsMiddleware', 'django.middleware.common.CommonMiddleware', ... ]","title":"CORS Configuration"},{"location":"lab3/urls/#allow-all-origins-in-development","text":"CORS_ALLOW_ALL_ORIGINS = True","title":"Allow all origins in development"},{"location":"lab3/views/","text":"Views Configuration \u00b6 Overview \u00b6 Experiment 3 implements API views using Django REST Framework's ViewSets and APIViews for the flight booking system. ViewSet Classes \u00b6 Flight ViewSet \u00b6 from rest_framework import viewsets from .models import Flight from .serializers import FlightSerializer class FlightViewSet(viewsets.ModelViewSet): queryset = Flight.objects.all() serializer_class = FlightSerializer Passenger ViewSet \u00b6 from .models import Passenger from .serializers import PassengerSerializer class PassengerViewSet(viewsets.ModelViewSet): queryset = Passenger.objects.all() serializer_class = PassengerSerializer Booking ViewSet \u00b6 from .models import Booking from .serializers import BookingSerializer class BookingViewSet(viewsets.ModelViewSet): queryset = Booking.objects.all() serializer_class = BookingSerializer Comment ViewSet \u00b6 from .models import Comment from .serializers import CommentSerializer class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer API Views \u00b6 Login View \u00b6 from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class LoginView(APIView): def post(self, request): username = request.data.get('username') password = request.data.get('password') if not username or not password: return Response( {'error': 'Please provide both username and password'}, status=status.HTTP_400_BAD_REQUEST ) try: passenger = Passenger.objects.get( username=username, password=password ) serializer = PassengerSerializer(passenger) return Response(serializer.data) except Passenger.DoesNotExist: return Response( {'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED ) ViewSet Features \u00b6 CRUD Operations List objects (GET) Create objects (POST) Retrieve objects (GET) Update objects (PUT/PATCH) Delete objects (DELETE) Serializer Integration Automatic serialization Deserialization Validation Query Set Management Filtering Ordering Pagination Response Handling JSON responses Status codes Error messages API Authentication \u00b6 Login Process Username/password validation Error handling Response formatting Session Management Session creation Session validation Session cleanup Response Examples \u00b6 Successful Response \u00b6 { \"id\": 1, \"flight_number\": \"CA123\", \"airline\": \"Air China\", \"departure_time\": \"2024-02-28T10:00:00Z\", \"arrival_time\": \"2024-02-28T12:00:00Z\", \"flight_type\": \"DEP\", \"gate_number\": \"A1\" } Error Response \u00b6 { \"error\": \"Please provide both username and password\" }","title":"Views"},{"location":"lab3/views/#views-configuration","text":"","title":"Views Configuration"},{"location":"lab3/views/#overview","text":"Experiment 3 implements API views using Django REST Framework's ViewSets and APIViews for the flight booking system.","title":"Overview"},{"location":"lab3/views/#viewset-classes","text":"","title":"ViewSet Classes"},{"location":"lab3/views/#flight-viewset","text":"from rest_framework import viewsets from .models import Flight from .serializers import FlightSerializer class FlightViewSet(viewsets.ModelViewSet): queryset = Flight.objects.all() serializer_class = FlightSerializer","title":"Flight ViewSet"},{"location":"lab3/views/#passenger-viewset","text":"from .models import Passenger from .serializers import PassengerSerializer class PassengerViewSet(viewsets.ModelViewSet): queryset = Passenger.objects.all() serializer_class = PassengerSerializer","title":"Passenger ViewSet"},{"location":"lab3/views/#booking-viewset","text":"from .models import Booking from .serializers import BookingSerializer class BookingViewSet(viewsets.ModelViewSet): queryset = Booking.objects.all() serializer_class = BookingSerializer","title":"Booking ViewSet"},{"location":"lab3/views/#comment-viewset","text":"from .models import Comment from .serializers import CommentSerializer class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer","title":"Comment ViewSet"},{"location":"lab3/views/#api-views","text":"","title":"API Views"},{"location":"lab3/views/#login-view","text":"from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class LoginView(APIView): def post(self, request): username = request.data.get('username') password = request.data.get('password') if not username or not password: return Response( {'error': 'Please provide both username and password'}, status=status.HTTP_400_BAD_REQUEST ) try: passenger = Passenger.objects.get( username=username, password=password ) serializer = PassengerSerializer(passenger) return Response(serializer.data) except Passenger.DoesNotExist: return Response( {'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED )","title":"Login View"},{"location":"lab3/views/#viewset-features","text":"CRUD Operations List objects (GET) Create objects (POST) Retrieve objects (GET) Update objects (PUT/PATCH) Delete objects (DELETE) Serializer Integration Automatic serialization Deserialization Validation Query Set Management Filtering Ordering Pagination Response Handling JSON responses Status codes Error messages","title":"ViewSet Features"},{"location":"lab3/views/#api-authentication","text":"Login Process Username/password validation Error handling Response formatting Session Management Session creation Session validation Session cleanup","title":"API Authentication"},{"location":"lab3/views/#response-examples","text":"","title":"Response Examples"},{"location":"lab3/views/#successful-response","text":"{ \"id\": 1, \"flight_number\": \"CA123\", \"airline\": \"Air China\", \"departure_time\": \"2024-02-28T10:00:00Z\", \"arrival_time\": \"2024-02-28T12:00:00Z\", \"flight_type\": \"DEP\", \"gate_number\": \"A1\" }","title":"Successful Response"},{"location":"lab3/views/#error-response","text":"{ \"error\": \"Please provide both username and password\" }","title":"Error Response"},{"location":"lab4/components/","text":"React Components \u00b6 Overview \u00b6 Experiment 4 implements various React components for the flight booking system frontend. These components provide a modern, interactive user interface for managing flights, bookings, and user interactions. Component Structure \u00b6 App Component \u00b6 // App.js import React from 'react'; import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; import Navigation from './components/Navigation'; import FlightList from './components/FlightList'; import BookingForm from './components/BookingForm'; import UserProfile from './components/UserProfile'; function App() { return ( <Router> <div className=\"app\"> <Navigation /> <Switch> <Route exact path=\"/\" component={FlightList} /> <Route path=\"/booking/:flightId\" component={BookingForm} /> <Route path=\"/profile\" component={UserProfile} /> </Switch> </div> </Router> ); } export default App; Navigation Component \u00b6 // Navigation.js import React from 'react'; import { Link } from 'react-router-dom'; function Navigation() { return ( <nav className=\"navigation\"> <Link to=\"/\">Flights</Link> <Link to=\"/profile\">My Profile</Link> </nav> ); } export default Navigation; Flight List Component \u00b6 // FlightList.js import React, { useState, useEffect } from 'react'; import { useHistory } from 'react-router-dom'; import FlightCard from './FlightCard'; function FlightList() { const [flights, setFlights] = useState([]); const history = useHistory(); useEffect(() => { fetchFlights(); }, []); const fetchFlights = async () => { try { const response = await fetch('http://localhost:8000/api/flights/'); const data = await response.json(); setFlights(data); } catch (error) { console.error('Error fetching flights:', error); } }; const handleBooking = (flightId) => { history.push(`/booking/${flightId}`); }; return ( <div className=\"flight-list\"> {flights.map(flight => ( <FlightCard key={flight.id} flight={flight} onBook={() => handleBooking(flight.id)} /> ))} </div> ); } export default FlightList; Flight Card Component \u00b6 // FlightCard.js import React from 'react'; function FlightCard({ flight, onBook }) { return ( <div className=\"flight-card\"> <h3>{flight.airline}</h3> <p>Flight Number: {flight.flight_number}</p> <p>Departure: {new Date(flight.departure_time).toLocaleString()}</p> <p>Arrival: {new Date(flight.arrival_time).toLocaleString()}</p> <p>Gate: {flight.gate_number}</p> <button onClick={onBook}>Book Now</button> </div> ); } export default FlightCard; Booking Form Component \u00b6 // BookingForm.js import React, { useState } from 'react'; import { useParams, useHistory } from 'react-router-dom'; function BookingForm() { const { flightId } = useParams(); const history = useHistory(); const [seatNumber, setSeatNumber] = useState(''); const handleSubmit = async (e) => { e.preventDefault(); try { const response = await fetch('http://localhost:8000/api/bookings/', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ flight: flightId, seat_number: seatNumber, }), }); if (response.ok) { history.push('/profile'); } } catch (error) { console.error('Error creating booking:', error); } }; return ( <form onSubmit={handleSubmit} className=\"booking-form\"> <h2>Book Flight</h2> <div> <label>Seat Number:</label> <input type=\"text\" value={seatNumber} onChange={(e) => setSeatNumber(e.target.value)} required /> </div> <button type=\"submit\">Confirm Booking</button> </form> ); } export default BookingForm; Component Features \u00b6 Routing React Router integration Dynamic route parameters Navigation handling State Management useState hooks useEffect for data fetching Component state handling API Integration Fetch API usage Async/await operations Error handling Event Handling Form submissions Button clicks User interactions Component Styling \u00b6 CSS Modules \u00b6 /* FlightCard.module.css */ .flight-card { border: 1px solid #ddd; padding: 15px; margin: 10px; border-radius: 5px; } .flight-card h3 { margin: 0 0 10px; color: #333; } .flight-card button { background-color: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; } Best Practices \u00b6 Component Organization Modular structure Single responsibility Reusable components State Management Proper state location State updates Props passing Performance Memoization Lazy loading Effect cleanup Error Handling Error boundaries Loading states User feedback","title":"Components"},{"location":"lab4/components/#react-components","text":"","title":"React Components"},{"location":"lab4/components/#overview","text":"Experiment 4 implements various React components for the flight booking system frontend. These components provide a modern, interactive user interface for managing flights, bookings, and user interactions.","title":"Overview"},{"location":"lab4/components/#component-structure","text":"","title":"Component Structure"},{"location":"lab4/components/#app-component","text":"// App.js import React from 'react'; import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; import Navigation from './components/Navigation'; import FlightList from './components/FlightList'; import BookingForm from './components/BookingForm'; import UserProfile from './components/UserProfile'; function App() { return ( <Router> <div className=\"app\"> <Navigation /> <Switch> <Route exact path=\"/\" component={FlightList} /> <Route path=\"/booking/:flightId\" component={BookingForm} /> <Route path=\"/profile\" component={UserProfile} /> </Switch> </div> </Router> ); } export default App;","title":"App Component"},{"location":"lab4/components/#navigation-component","text":"// Navigation.js import React from 'react'; import { Link } from 'react-router-dom'; function Navigation() { return ( <nav className=\"navigation\"> <Link to=\"/\">Flights</Link> <Link to=\"/profile\">My Profile</Link> </nav> ); } export default Navigation;","title":"Navigation Component"},{"location":"lab4/components/#flight-list-component","text":"// FlightList.js import React, { useState, useEffect } from 'react'; import { useHistory } from 'react-router-dom'; import FlightCard from './FlightCard'; function FlightList() { const [flights, setFlights] = useState([]); const history = useHistory(); useEffect(() => { fetchFlights(); }, []); const fetchFlights = async () => { try { const response = await fetch('http://localhost:8000/api/flights/'); const data = await response.json(); setFlights(data); } catch (error) { console.error('Error fetching flights:', error); } }; const handleBooking = (flightId) => { history.push(`/booking/${flightId}`); }; return ( <div className=\"flight-list\"> {flights.map(flight => ( <FlightCard key={flight.id} flight={flight} onBook={() => handleBooking(flight.id)} /> ))} </div> ); } export default FlightList;","title":"Flight List Component"},{"location":"lab4/components/#flight-card-component","text":"// FlightCard.js import React from 'react'; function FlightCard({ flight, onBook }) { return ( <div className=\"flight-card\"> <h3>{flight.airline}</h3> <p>Flight Number: {flight.flight_number}</p> <p>Departure: {new Date(flight.departure_time).toLocaleString()}</p> <p>Arrival: {new Date(flight.arrival_time).toLocaleString()}</p> <p>Gate: {flight.gate_number}</p> <button onClick={onBook}>Book Now</button> </div> ); } export default FlightCard;","title":"Flight Card Component"},{"location":"lab4/components/#booking-form-component","text":"// BookingForm.js import React, { useState } from 'react'; import { useParams, useHistory } from 'react-router-dom'; function BookingForm() { const { flightId } = useParams(); const history = useHistory(); const [seatNumber, setSeatNumber] = useState(''); const handleSubmit = async (e) => { e.preventDefault(); try { const response = await fetch('http://localhost:8000/api/bookings/', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ flight: flightId, seat_number: seatNumber, }), }); if (response.ok) { history.push('/profile'); } } catch (error) { console.error('Error creating booking:', error); } }; return ( <form onSubmit={handleSubmit} className=\"booking-form\"> <h2>Book Flight</h2> <div> <label>Seat Number:</label> <input type=\"text\" value={seatNumber} onChange={(e) => setSeatNumber(e.target.value)} required /> </div> <button type=\"submit\">Confirm Booking</button> </form> ); } export default BookingForm;","title":"Booking Form Component"},{"location":"lab4/components/#component-features","text":"Routing React Router integration Dynamic route parameters Navigation handling State Management useState hooks useEffect for data fetching Component state handling API Integration Fetch API usage Async/await operations Error handling Event Handling Form submissions Button clicks User interactions","title":"Component Features"},{"location":"lab4/components/#component-styling","text":"","title":"Component Styling"},{"location":"lab4/components/#css-modules","text":"/* FlightCard.module.css */ .flight-card { border: 1px solid #ddd; padding: 15px; margin: 10px; border-radius: 5px; } .flight-card h3 { margin: 0 0 10px; color: #333; } .flight-card button { background-color: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; }","title":"CSS Modules"},{"location":"lab4/components/#best-practices","text":"Component Organization Modular structure Single responsibility Reusable components State Management Proper state location State updates Props passing Performance Memoization Lazy loading Effect cleanup Error Handling Error boundaries Loading states User feedback","title":"Best Practices"},{"location":"lab4/pages/","text":"Pages and Routing \u00b6 Overview \u00b6 Experiment 4 implements page routing and layout for the flight booking system frontend using React Router and modern web design principles. Page Structure \u00b6 Main Pages \u00b6 Home Page Flight List Page Booking Page User Profile Page Login/Register Page Route Configuration \u00b6 Router Setup \u00b6 // App.js import React from 'react'; import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; import HomePage from './pages/HomePage'; import FlightListPage from './pages/FlightListPage'; import BookingPage from './pages/BookingPage'; import ProfilePage from './pages/ProfilePage'; import LoginPage from './pages/LoginPage'; import RegisterPage from './pages/RegisterPage'; function App() { return ( <Router> <Switch> <Route exact path=\"/\" component={HomePage} /> <Route path=\"/flights\" component={FlightListPage} /> <Route path=\"/booking/:flightId\" component={BookingPage} /> <Route path=\"/profile\" component={ProfilePage} /> <Route path=\"/login\" component={LoginPage} /> <Route path=\"/register\" component={RegisterPage} /> </Switch> </Router> ); } export default App; Page Components \u00b6 Home Page \u00b6 // HomePage.js import React from 'react'; import { Link } from 'react-router-dom'; function HomePage() { return ( <div className=\"home-page\"> <header> <h1>Welcome to Flight Booking System</h1> </header> <main> <section className=\"search-section\"> <h2>Find Your Flight</h2> <Link to=\"/flights\" className=\"cta-button\"> Search Flights </Link> </section> </main> </div> ); } export default HomePage; Flight List Page \u00b6 // FlightListPage.js import React from 'react'; import FlightList from '../components/FlightList'; import SearchFilter from '../components/SearchFilter'; function FlightListPage() { return ( <div className=\"flight-list-page\"> <h1>Available Flights</h1> <SearchFilter /> <FlightList /> </div> ); } export default FlightListPage; Booking Page \u00b6 // BookingPage.js import React from 'react'; import { useParams } from 'react-router-dom'; import BookingForm from '../components/BookingForm'; import FlightDetails from '../components/FlightDetails'; function BookingPage() { const { flightId } = useParams(); return ( <div className=\"booking-page\"> <h1>Flight Booking</h1> <FlightDetails flightId={flightId} /> <BookingForm flightId={flightId} /> </div> ); } export default BookingPage; Page Implementation Details \u00b6 Login Page (LoginView) \u00b6 The login page implements user authentication with the following features: Clean login form design Username and password validation Error message display Session persistence Flight List Page (FlightView) \u00b6 The flight list page displays all available flights with: Table format flight data display Filtering by flight number and airline Flight status display (Arrival/Departure) Pagination functionality Booking Management Page (BookingView) \u00b6 The booking management page is the core functionality page with: Data Display \u00b6 Statistics Cards Total bookings Current user Recent bookings Booking List Flight number (with tags) Flight type (Arrival/Departure with color coding) Departure time (formatted display) Passenger information (with avatar) Operations \u00b6 New Booking Flight number input (with validation) Seat number selection (with format validation) Submission confirmation Edit Booking Seat number modification Flight information retention Real-time validation Cancellation Confirmation dialog Security prompt Status feedback User Experience \u00b6 Responsive layout Operation feedback Error handling Loading states Refresh functionality Code Examples \u00b6 Form Validation \u00b6 const rules = { flight: [ { required: true, message: 'Please enter flight number', trigger: 'blur' }, { min: 3, max: 10, message: 'Flight number must be 3-10 characters', trigger: 'blur' } ], seat_number: [ { required: true, message: 'Please enter seat number', trigger: 'blur' }, { pattern: /^[A-Z]?[0-9]+$/, message: 'Invalid seat number format', trigger: 'blur' } ] }; Data Loading \u00b6 const loadBookings = () => { axios.get('http://127.0.0.1:8000/app/api/bookings/') .then(response => { const userBookings = response.data.filter( (booking: any) => booking.passenger.username === store.state.username ); // Process data... }) .catch(error => { console.error(error); }); }; Styling \u00b6 Using Element Plus component library with custom styles: .booking { padding: 20px; } .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; } .statistics { margin-bottom: 20px; } .card-content { font-size: 24px; font-weight: bold; text-align: center; color: #409EFF; } API Endpoints \u00b6 Get Booking List \u00b6 Endpoint: /app/api/bookings/ Method: GET Response: List of bookings Create Booking \u00b6 Endpoint: /app/api/bookings/ Method: POST Data: json { \"passenger_id\": 2, \"seat_number\": \"A123\", \"flight\": 5 } Update Booking \u00b6 Endpoint: /app/api/bookings/{id}/ Method: PATCH Data: json { \"seat_number\": \"B456\" } Delete Booking \u00b6 Endpoint: /app/api/bookings/{id}/ Method: DELETE","title":"Pages"},{"location":"lab4/pages/#pages-and-routing","text":"","title":"Pages and Routing"},{"location":"lab4/pages/#overview","text":"Experiment 4 implements page routing and layout for the flight booking system frontend using React Router and modern web design principles.","title":"Overview"},{"location":"lab4/pages/#page-structure","text":"","title":"Page Structure"},{"location":"lab4/pages/#main-pages","text":"Home Page Flight List Page Booking Page User Profile Page Login/Register Page","title":"Main Pages"},{"location":"lab4/pages/#route-configuration","text":"","title":"Route Configuration"},{"location":"lab4/pages/#router-setup","text":"// App.js import React from 'react'; import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; import HomePage from './pages/HomePage'; import FlightListPage from './pages/FlightListPage'; import BookingPage from './pages/BookingPage'; import ProfilePage from './pages/ProfilePage'; import LoginPage from './pages/LoginPage'; import RegisterPage from './pages/RegisterPage'; function App() { return ( <Router> <Switch> <Route exact path=\"/\" component={HomePage} /> <Route path=\"/flights\" component={FlightListPage} /> <Route path=\"/booking/:flightId\" component={BookingPage} /> <Route path=\"/profile\" component={ProfilePage} /> <Route path=\"/login\" component={LoginPage} /> <Route path=\"/register\" component={RegisterPage} /> </Switch> </Router> ); } export default App;","title":"Router Setup"},{"location":"lab4/pages/#page-components","text":"","title":"Page Components"},{"location":"lab4/pages/#home-page","text":"// HomePage.js import React from 'react'; import { Link } from 'react-router-dom'; function HomePage() { return ( <div className=\"home-page\"> <header> <h1>Welcome to Flight Booking System</h1> </header> <main> <section className=\"search-section\"> <h2>Find Your Flight</h2> <Link to=\"/flights\" className=\"cta-button\"> Search Flights </Link> </section> </main> </div> ); } export default HomePage;","title":"Home Page"},{"location":"lab4/pages/#flight-list-page","text":"// FlightListPage.js import React from 'react'; import FlightList from '../components/FlightList'; import SearchFilter from '../components/SearchFilter'; function FlightListPage() { return ( <div className=\"flight-list-page\"> <h1>Available Flights</h1> <SearchFilter /> <FlightList /> </div> ); } export default FlightListPage;","title":"Flight List Page"},{"location":"lab4/pages/#booking-page","text":"// BookingPage.js import React from 'react'; import { useParams } from 'react-router-dom'; import BookingForm from '../components/BookingForm'; import FlightDetails from '../components/FlightDetails'; function BookingPage() { const { flightId } = useParams(); return ( <div className=\"booking-page\"> <h1>Flight Booking</h1> <FlightDetails flightId={flightId} /> <BookingForm flightId={flightId} /> </div> ); } export default BookingPage;","title":"Booking Page"},{"location":"lab4/pages/#page-implementation-details","text":"","title":"Page Implementation Details"},{"location":"lab4/pages/#login-page-loginview","text":"The login page implements user authentication with the following features: Clean login form design Username and password validation Error message display Session persistence","title":"Login Page (LoginView)"},{"location":"lab4/pages/#flight-list-page-flightview","text":"The flight list page displays all available flights with: Table format flight data display Filtering by flight number and airline Flight status display (Arrival/Departure) Pagination functionality","title":"Flight List Page (FlightView)"},{"location":"lab4/pages/#booking-management-page-bookingview","text":"The booking management page is the core functionality page with:","title":"Booking Management Page (BookingView)"},{"location":"lab4/pages/#data-display","text":"Statistics Cards Total bookings Current user Recent bookings Booking List Flight number (with tags) Flight type (Arrival/Departure with color coding) Departure time (formatted display) Passenger information (with avatar)","title":"Data Display"},{"location":"lab4/pages/#operations","text":"New Booking Flight number input (with validation) Seat number selection (with format validation) Submission confirmation Edit Booking Seat number modification Flight information retention Real-time validation Cancellation Confirmation dialog Security prompt Status feedback","title":"Operations"},{"location":"lab4/pages/#user-experience","text":"Responsive layout Operation feedback Error handling Loading states Refresh functionality","title":"User Experience"},{"location":"lab4/pages/#code-examples","text":"","title":"Code Examples"},{"location":"lab4/pages/#form-validation","text":"const rules = { flight: [ { required: true, message: 'Please enter flight number', trigger: 'blur' }, { min: 3, max: 10, message: 'Flight number must be 3-10 characters', trigger: 'blur' } ], seat_number: [ { required: true, message: 'Please enter seat number', trigger: 'blur' }, { pattern: /^[A-Z]?[0-9]+$/, message: 'Invalid seat number format', trigger: 'blur' } ] };","title":"Form Validation"},{"location":"lab4/pages/#data-loading","text":"const loadBookings = () => { axios.get('http://127.0.0.1:8000/app/api/bookings/') .then(response => { const userBookings = response.data.filter( (booking: any) => booking.passenger.username === store.state.username ); // Process data... }) .catch(error => { console.error(error); }); };","title":"Data Loading"},{"location":"lab4/pages/#styling","text":"Using Element Plus component library with custom styles: .booking { padding: 20px; } .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; } .statistics { margin-bottom: 20px; } .card-content { font-size: 24px; font-weight: bold; text-align: center; color: #409EFF; }","title":"Styling"},{"location":"lab4/pages/#api-endpoints","text":"","title":"API Endpoints"},{"location":"lab4/pages/#get-booking-list","text":"Endpoint: /app/api/bookings/ Method: GET Response: List of bookings","title":"Get Booking List"},{"location":"lab4/pages/#create-booking","text":"Endpoint: /app/api/bookings/ Method: POST Data: json { \"passenger_id\": 2, \"seat_number\": \"A123\", \"flight\": 5 }","title":"Create Booking"},{"location":"lab4/pages/#update-booking","text":"Endpoint: /app/api/bookings/{id}/ Method: PATCH Data: json { \"seat_number\": \"B456\" }","title":"Update Booking"},{"location":"lab4/pages/#delete-booking","text":"Endpoint: /app/api/bookings/{id}/ Method: DELETE","title":"Delete Booking"}]}